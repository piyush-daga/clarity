"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_serwist_window_dist_index_js"],{

/***/ "(app-pages-browser)/./node_modules/@serwist/window/dist/index.internal.js":
/*!*************************************************************!*\
  !*** ./node_modules/@serwist/window/dist/index.internal.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isCurrentPageOutOfScope: () => (/* binding */ isCurrentPageOutOfScope)\n/* harmony export */ });\nconst isCurrentPageOutOfScope = (scope)=>{\n    const scopeURL = new URL(scope, document.baseURI);\n    const scopeURLBasePath = new URL(\"./\", scopeURL.href).pathname;\n    return !location.pathname.startsWith(scopeURLBasePath);\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ac2Vyd2lzdC93aW5kb3cvZGlzdC9pbmRleC5pbnRlcm5hbC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFbUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9waXl1c2guZGFnYUBwb3N0bWFuLmNvbS9Eb2N1bWVudHMvUHJvamVjdHMvcGl5dXNoLWRhZ2EvZXZhLTIvc2Vzc2lvbjEtYnVpbGQtdG9kby1jYWxlbmRhci9ub2RlX21vZHVsZXMvQHNlcndpc3Qvd2luZG93L2Rpc3QvaW5kZXguaW50ZXJuYWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgaXNDdXJyZW50UGFnZU91dE9mU2NvcGUgPSAoc2NvcGUpPT57XG4gICAgY29uc3Qgc2NvcGVVUkwgPSBuZXcgVVJMKHNjb3BlLCBkb2N1bWVudC5iYXNlVVJJKTtcbiAgICBjb25zdCBzY29wZVVSTEJhc2VQYXRoID0gbmV3IFVSTChcIi4vXCIsIHNjb3BlVVJMLmhyZWYpLnBhdGhuYW1lO1xuICAgIHJldHVybiAhbG9jYXRpb24ucGF0aG5hbWUuc3RhcnRzV2l0aChzY29wZVVSTEJhc2VQYXRoKTtcbn07XG5cbmV4cG9ydCB7IGlzQ3VycmVudFBhZ2VPdXRPZlNjb3BlIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@serwist/window/dist/index.internal.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@serwist/window/dist/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@serwist/window/dist/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Serwist: () => (/* binding */ Serwist),\n/* harmony export */   SerwistEvent: () => (/* binding */ SerwistEvent),\n/* harmony export */   messageSW: () => (/* binding */ messageSW)\n/* harmony export */ });\n/* harmony import */ var serwist_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! serwist/internal */ \"(app-pages-browser)/./node_modules/serwist/dist/index.internal.js\");\n/* harmony import */ var _index_internal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.internal.js */ \"(app-pages-browser)/./node_modules/@serwist/window/dist/index.internal.js\");\n\n\n\nconst messageSW = (sw, data)=>{\n    return new Promise((resolve)=>{\n        const messageChannel = new MessageChannel();\n        messageChannel.port1.onmessage = (event)=>{\n            resolve(event.data);\n        };\n        sw.postMessage(data, [\n            messageChannel.port2\n        ]);\n    });\n};\n\nclass SerwistEvent {\n    type;\n    target;\n    sw;\n    originalEvent;\n    isExternal;\n    constructor(type, props){\n        this.type = type;\n        Object.assign(this, props);\n    }\n}\n\nclass SerwistEventTarget {\n    _eventListenerRegistry = new Map();\n    addEventListener(type, listener) {\n        const foo = this._getEventListenersByType(type);\n        foo.add(listener);\n    }\n    removeEventListener(type, listener) {\n        this._getEventListenersByType(type).delete(listener);\n    }\n    dispatchEvent(event) {\n        event.target = this;\n        const listeners = this._getEventListenersByType(event.type);\n        for (const listener of listeners){\n            listener(event);\n        }\n    }\n    _getEventListenersByType(type) {\n        if (!this._eventListenerRegistry.has(type)) {\n            this._eventListenerRegistry.set(type, new Set());\n        }\n        return this._eventListenerRegistry.get(type);\n    }\n}\n\nfunction urlsMatch(url1, url2) {\n    const { href } = location;\n    return new URL(url1, href).href === new URL(url2, href).href;\n}\n\nconst WAITING_TIMEOUT_DURATION = 200;\nconst REGISTRATION_TIMEOUT_DURATION = 60000;\nconst SKIP_WAITING_MESSAGE = {\n    type: \"SKIP_WAITING\"\n};\nclass Serwist extends SerwistEventTarget {\n    _scriptURL;\n    _registerOptions = {};\n    _updateFoundCount = 0;\n    _swDeferred = new serwist_internal__WEBPACK_IMPORTED_MODULE_0__.Deferred();\n    _activeDeferred = new serwist_internal__WEBPACK_IMPORTED_MODULE_0__.Deferred();\n    _controllingDeferred = new serwist_internal__WEBPACK_IMPORTED_MODULE_0__.Deferred();\n    _registrationTime = 0;\n    _isUpdate;\n    _compatibleControllingSW;\n    _registration;\n    _sw;\n    _ownSWs = new Set();\n    _externalSW;\n    _waitingTimeout;\n    constructor(scriptURL, registerOptions = {}){\n        super();\n        this._scriptURL = scriptURL;\n        this._registerOptions = registerOptions;\n        navigator.serviceWorker.addEventListener(\"message\", this._onMessage);\n    }\n    async register({ immediate = false } = {}) {\n        if (true) {\n            if (this._registrationTime) {\n                serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Cannot re-register a Serwist instance after it has been registered. Create a new instance instead.\");\n                return;\n            }\n        }\n        if (!immediate && document.readyState !== \"complete\") {\n            await new Promise((res)=>window.addEventListener(\"load\", res));\n        }\n        this._isUpdate = Boolean(navigator.serviceWorker.controller);\n        this._compatibleControllingSW = this._getControllingSWIfCompatible();\n        this._registration = await this._registerScript();\n        if (this._compatibleControllingSW) {\n            this._sw = this._compatibleControllingSW;\n            this._activeDeferred.resolve(this._compatibleControllingSW);\n            this._controllingDeferred.resolve(this._compatibleControllingSW);\n            this._compatibleControllingSW.addEventListener(\"statechange\", this._onStateChange, {\n                once: true\n            });\n        }\n        const waitingSW = this._registration.waiting;\n        if (waitingSW && urlsMatch(waitingSW.scriptURL, this._scriptURL.toString())) {\n            this._sw = waitingSW;\n            void Promise.resolve().then(()=>{\n                this.dispatchEvent(new SerwistEvent(\"waiting\", {\n                    sw: waitingSW,\n                    wasWaitingBeforeRegister: true\n                }));\n                if (true) {\n                    serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.warn(\"A service worker was already waiting to activate before this script was registered...\");\n                }\n            });\n        }\n        if (this._sw) {\n            this._swDeferred.resolve(this._sw);\n            this._ownSWs.add(this._sw);\n        }\n        if (true) {\n            serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(\"Successfully registered service worker.\", this._scriptURL.toString());\n            if (navigator.serviceWorker.controller) {\n                if (this._compatibleControllingSW) {\n                    serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.debug(\"A service worker with the same script URL is already controlling this page.\");\n                } else {\n                    serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.debug(\"A service worker with a different script URL is currently controlling the page. The browser is now fetching the new script now...\");\n                }\n            }\n            if ((0,_index_internal_js__WEBPACK_IMPORTED_MODULE_1__.isCurrentPageOutOfScope)(this._registerOptions.scope || this._scriptURL.toString())) {\n                serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.warn(\"The current page is not in scope for the registered service worker. Was this a mistake?\");\n            }\n        }\n        this._registration.addEventListener(\"updatefound\", this._onUpdateFound);\n        navigator.serviceWorker.addEventListener(\"controllerchange\", this._onControllerChange);\n        return this._registration;\n    }\n    async update() {\n        if (!this._registration) {\n            if (true) {\n                serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Cannot update a Serwist instance without being registered. Register the Serwist instance first.\");\n            }\n            return;\n        }\n        await this._registration.update();\n    }\n    get active() {\n        return this._activeDeferred.promise;\n    }\n    get controlling() {\n        return this._controllingDeferred.promise;\n    }\n    getSW() {\n        return this._sw !== undefined ? Promise.resolve(this._sw) : this._swDeferred.promise;\n    }\n    async messageSW(data) {\n        const sw = await this.getSW();\n        return messageSW(sw, data);\n    }\n    messageSkipWaiting() {\n        if (this._registration?.waiting) {\n            void messageSW(this._registration.waiting, SKIP_WAITING_MESSAGE);\n        }\n    }\n    _getControllingSWIfCompatible() {\n        const controller = navigator.serviceWorker.controller;\n        if (controller && urlsMatch(controller.scriptURL, this._scriptURL.toString())) {\n            return controller;\n        }\n        return undefined;\n    }\n    async _registerScript() {\n        try {\n            const reg = await navigator.serviceWorker.register(this._scriptURL, this._registerOptions);\n            this._registrationTime = performance.now();\n            return reg;\n        } catch (error) {\n            if (true) {\n                serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.error(error);\n            }\n            throw error;\n        }\n    }\n    _onUpdateFound = (originalEvent)=>{\n        const registration = this._registration;\n        const installingSW = registration.installing;\n        const updateLikelyTriggeredExternally = this._updateFoundCount > 0 || !urlsMatch(installingSW.scriptURL, this._scriptURL.toString()) || performance.now() > this._registrationTime + REGISTRATION_TIMEOUT_DURATION;\n        if (updateLikelyTriggeredExternally) {\n            this._externalSW = installingSW;\n            registration.removeEventListener(\"updatefound\", this._onUpdateFound);\n        } else {\n            this._sw = installingSW;\n            this._ownSWs.add(installingSW);\n            this._swDeferred.resolve(installingSW);\n            if (true) {\n                if (this._isUpdate) {\n                    serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(\"Updated service worker found. Installing now...\");\n                } else {\n                    serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(\"Service worker is installing...\");\n                }\n            }\n        }\n        this.dispatchEvent(new SerwistEvent(\"installing\", {\n            sw: installingSW,\n            originalEvent,\n            isExternal: updateLikelyTriggeredExternally,\n            isUpdate: this._isUpdate\n        }));\n        ++this._updateFoundCount;\n        installingSW.addEventListener(\"statechange\", this._onStateChange);\n    };\n    _onStateChange = (originalEvent)=>{\n        const registration = this._registration;\n        const sw = originalEvent.target;\n        const { state } = sw;\n        const isExternal = sw === this._externalSW;\n        const eventProps = {\n            sw,\n            isExternal,\n            originalEvent\n        };\n        if (!isExternal && this._isUpdate) {\n            eventProps.isUpdate = true;\n        }\n        this.dispatchEvent(new SerwistEvent(state, eventProps));\n        if (state === \"installed\") {\n            this._waitingTimeout = self.setTimeout(()=>{\n                if (state === \"installed\" && registration.waiting === sw) {\n                    this.dispatchEvent(new SerwistEvent(\"waiting\", eventProps));\n                    if (true) {\n                        if (isExternal) {\n                            serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.warn(\"An external service worker has installed but is \" + \"waiting for this client to close before activating...\");\n                        } else {\n                            serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.warn(\"The service worker has installed but is waiting \" + \"for existing clients to close before activating...\");\n                        }\n                    }\n                }\n            }, WAITING_TIMEOUT_DURATION);\n        } else if (state === \"activating\") {\n            clearTimeout(this._waitingTimeout);\n            if (!isExternal) {\n                this._activeDeferred.resolve(sw);\n            }\n        }\n        if (true) {\n            switch(state){\n                case \"installed\":\n                    if (isExternal) {\n                        serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.warn(\"An external service worker has installed. \" + \"You may want to suggest users reload this page.\");\n                    } else {\n                        serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(\"Registered service worker installed.\");\n                    }\n                    break;\n                case \"activated\":\n                    if (isExternal) {\n                        serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.warn(\"An external service worker has activated.\");\n                    } else {\n                        serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(\"Registered service worker activated.\");\n                        if (sw !== navigator.serviceWorker.controller) {\n                            serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.warn(\"The registered service worker is active but \" + \"not yet controlling the page. Reload or run \" + \"`clients.claim()` in the service worker.\");\n                        }\n                    }\n                    break;\n                case \"redundant\":\n                    if (sw === this._compatibleControllingSW) {\n                        serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(\"Previously controlling service worker now redundant!\");\n                    } else if (!isExternal) {\n                        serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(\"Registered service worker now redundant!\");\n                    }\n                    break;\n            }\n        }\n    };\n    _onControllerChange = (originalEvent)=>{\n        const sw = this._sw;\n        const isExternal = sw !== navigator.serviceWorker.controller;\n        this.dispatchEvent(new SerwistEvent(\"controlling\", {\n            isExternal,\n            originalEvent,\n            sw,\n            isUpdate: this._isUpdate\n        }));\n        if (!isExternal) {\n            if (true) {\n                serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(\"Registered service worker now controlling this page.\");\n            }\n            this._controllingDeferred.resolve(sw);\n        }\n    };\n    _onMessage = async (originalEvent)=>{\n        const { data, ports, source } = originalEvent;\n        await this.getSW();\n        if (this._ownSWs.has(source)) {\n            this.dispatchEvent(new SerwistEvent(\"message\", {\n                data,\n                originalEvent,\n                ports,\n                sw: source\n            }));\n        }\n    };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ac2Vyd2lzdC93aW5kb3cvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFvRDtBQUNVOztBQUU5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNEQUFRO0FBQzlCLDBCQUEwQixzREFBUTtBQUNsQywrQkFBK0Isc0RBQVE7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLG9CQUFvQixJQUFJO0FBQzdDLFlBQVksSUFBcUM7QUFDakQ7QUFDQSxnQkFBZ0Isb0RBQU07QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsb0JBQW9CLElBQXFDO0FBQ3pELG9CQUFvQixvREFBTTtBQUMxQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxJQUFxQztBQUNqRCxZQUFZLG9EQUFNO0FBQ2xCO0FBQ0E7QUFDQSxvQkFBb0Isb0RBQU07QUFDMUIsa0JBQWtCO0FBQ2xCLG9CQUFvQixvREFBTTtBQUMxQjtBQUNBO0FBQ0EsZ0JBQWdCLDJFQUF1QjtBQUN2QyxnQkFBZ0Isb0RBQU07QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixJQUFxQztBQUNyRCxnQkFBZ0Isb0RBQU07QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixnQkFBZ0IsSUFBcUM7QUFDckQsZ0JBQWdCLG9EQUFNO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLElBQXFDO0FBQ3JEO0FBQ0Esb0JBQW9CLG9EQUFNO0FBQzFCLGtCQUFrQjtBQUNsQixvQkFBb0Isb0RBQU07QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLElBQXFDO0FBQzdEO0FBQ0EsNEJBQTRCLG9EQUFNO0FBQ2xDLDBCQUEwQjtBQUMxQiw0QkFBNEIsb0RBQU07QUFDbEM7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxJQUFxQztBQUNqRDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isb0RBQU07QUFDOUIsc0JBQXNCO0FBQ3RCLHdCQUF3QixvREFBTTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixvREFBTTtBQUM5QixzQkFBc0I7QUFDdEIsd0JBQXdCLG9EQUFNO0FBQzlCO0FBQ0EsNEJBQTRCLG9EQUFNO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isb0RBQU07QUFDOUIsc0JBQXNCO0FBQ3RCLHdCQUF3QixvREFBTTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLGdCQUFnQixJQUFxQztBQUNyRCxnQkFBZ0Isb0RBQU07QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixzQkFBc0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBOztBQUU0QyIsInNvdXJjZXMiOlsiL1VzZXJzL3BpeXVzaC5kYWdhQHBvc3RtYW4uY29tL0RvY3VtZW50cy9Qcm9qZWN0cy9waXl1c2gtZGFnYS9ldmEtMi9zZXNzaW9uMS1idWlsZC10b2RvLWNhbGVuZGFyL25vZGVfbW9kdWxlcy9Ac2Vyd2lzdC93aW5kb3cvZGlzdC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEZWZlcnJlZCwgbG9nZ2VyIH0gZnJvbSAnc2Vyd2lzdC9pbnRlcm5hbCc7XG5pbXBvcnQgeyBpc0N1cnJlbnRQYWdlT3V0T2ZTY29wZSB9IGZyb20gJy4vaW5kZXguaW50ZXJuYWwuanMnO1xuXG5jb25zdCBtZXNzYWdlU1cgPSAoc3csIGRhdGEpPT57XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKT0+e1xuICAgICAgICBjb25zdCBtZXNzYWdlQ2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgICAgICBtZXNzYWdlQ2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSAoZXZlbnQpPT57XG4gICAgICAgICAgICByZXNvbHZlKGV2ZW50LmRhdGEpO1xuICAgICAgICB9O1xuICAgICAgICBzdy5wb3N0TWVzc2FnZShkYXRhLCBbXG4gICAgICAgICAgICBtZXNzYWdlQ2hhbm5lbC5wb3J0MlxuICAgICAgICBdKTtcbiAgICB9KTtcbn07XG5cbmNsYXNzIFNlcndpc3RFdmVudCB7XG4gICAgdHlwZTtcbiAgICB0YXJnZXQ7XG4gICAgc3c7XG4gICAgb3JpZ2luYWxFdmVudDtcbiAgICBpc0V4dGVybmFsO1xuICAgIGNvbnN0cnVjdG9yKHR5cGUsIHByb3BzKXtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBwcm9wcyk7XG4gICAgfVxufVxuXG5jbGFzcyBTZXJ3aXN0RXZlbnRUYXJnZXQge1xuICAgIF9ldmVudExpc3RlbmVyUmVnaXN0cnkgPSBuZXcgTWFwKCk7XG4gICAgYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgICBjb25zdCBmb28gPSB0aGlzLl9nZXRFdmVudExpc3RlbmVyc0J5VHlwZSh0eXBlKTtcbiAgICAgICAgZm9vLmFkZChsaXN0ZW5lcik7XG4gICAgfVxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fZ2V0RXZlbnRMaXN0ZW5lcnNCeVR5cGUodHlwZSkuZGVsZXRlKGxpc3RlbmVyKTtcbiAgICB9XG4gICAgZGlzcGF0Y2hFdmVudChldmVudCkge1xuICAgICAgICBldmVudC50YXJnZXQgPSB0aGlzO1xuICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9nZXRFdmVudExpc3RlbmVyc0J5VHlwZShldmVudC50eXBlKTtcbiAgICAgICAgZm9yIChjb25zdCBsaXN0ZW5lciBvZiBsaXN0ZW5lcnMpe1xuICAgICAgICAgICAgbGlzdGVuZXIoZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9nZXRFdmVudExpc3RlbmVyc0J5VHlwZSh0eXBlKSB7XG4gICAgICAgIGlmICghdGhpcy5fZXZlbnRMaXN0ZW5lclJlZ2lzdHJ5Lmhhcyh0eXBlKSkge1xuICAgICAgICAgICAgdGhpcy5fZXZlbnRMaXN0ZW5lclJlZ2lzdHJ5LnNldCh0eXBlLCBuZXcgU2V0KCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9ldmVudExpc3RlbmVyUmVnaXN0cnkuZ2V0KHR5cGUpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdXJsc01hdGNoKHVybDEsIHVybDIpIHtcbiAgICBjb25zdCB7IGhyZWYgfSA9IGxvY2F0aW9uO1xuICAgIHJldHVybiBuZXcgVVJMKHVybDEsIGhyZWYpLmhyZWYgPT09IG5ldyBVUkwodXJsMiwgaHJlZikuaHJlZjtcbn1cblxuY29uc3QgV0FJVElOR19USU1FT1VUX0RVUkFUSU9OID0gMjAwO1xuY29uc3QgUkVHSVNUUkFUSU9OX1RJTUVPVVRfRFVSQVRJT04gPSA2MDAwMDtcbmNvbnN0IFNLSVBfV0FJVElOR19NRVNTQUdFID0ge1xuICAgIHR5cGU6IFwiU0tJUF9XQUlUSU5HXCJcbn07XG5jbGFzcyBTZXJ3aXN0IGV4dGVuZHMgU2Vyd2lzdEV2ZW50VGFyZ2V0IHtcbiAgICBfc2NyaXB0VVJMO1xuICAgIF9yZWdpc3Rlck9wdGlvbnMgPSB7fTtcbiAgICBfdXBkYXRlRm91bmRDb3VudCA9IDA7XG4gICAgX3N3RGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKTtcbiAgICBfYWN0aXZlRGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKTtcbiAgICBfY29udHJvbGxpbmdEZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xuICAgIF9yZWdpc3RyYXRpb25UaW1lID0gMDtcbiAgICBfaXNVcGRhdGU7XG4gICAgX2NvbXBhdGlibGVDb250cm9sbGluZ1NXO1xuICAgIF9yZWdpc3RyYXRpb247XG4gICAgX3N3O1xuICAgIF9vd25TV3MgPSBuZXcgU2V0KCk7XG4gICAgX2V4dGVybmFsU1c7XG4gICAgX3dhaXRpbmdUaW1lb3V0O1xuICAgIGNvbnN0cnVjdG9yKHNjcmlwdFVSTCwgcmVnaXN0ZXJPcHRpb25zID0ge30pe1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9zY3JpcHRVUkwgPSBzY3JpcHRVUkw7XG4gICAgICAgIHRoaXMuX3JlZ2lzdGVyT3B0aW9ucyA9IHJlZ2lzdGVyT3B0aW9ucztcbiAgICAgICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgdGhpcy5fb25NZXNzYWdlKTtcbiAgICB9XG4gICAgYXN5bmMgcmVnaXN0ZXIoeyBpbW1lZGlhdGUgPSBmYWxzZSB9ID0ge30pIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3JlZ2lzdHJhdGlvblRpbWUpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoXCJDYW5ub3QgcmUtcmVnaXN0ZXIgYSBTZXJ3aXN0IGluc3RhbmNlIGFmdGVyIGl0IGhhcyBiZWVuIHJlZ2lzdGVyZWQuIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBpbnN0ZWFkLlwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpbW1lZGlhdGUgJiYgZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJjb21wbGV0ZVwiKSB7XG4gICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzKT0+d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIHJlcykpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2lzVXBkYXRlID0gQm9vbGVhbihuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5jb250cm9sbGVyKTtcbiAgICAgICAgdGhpcy5fY29tcGF0aWJsZUNvbnRyb2xsaW5nU1cgPSB0aGlzLl9nZXRDb250cm9sbGluZ1NXSWZDb21wYXRpYmxlKCk7XG4gICAgICAgIHRoaXMuX3JlZ2lzdHJhdGlvbiA9IGF3YWl0IHRoaXMuX3JlZ2lzdGVyU2NyaXB0KCk7XG4gICAgICAgIGlmICh0aGlzLl9jb21wYXRpYmxlQ29udHJvbGxpbmdTVykge1xuICAgICAgICAgICAgdGhpcy5fc3cgPSB0aGlzLl9jb21wYXRpYmxlQ29udHJvbGxpbmdTVztcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZURlZmVycmVkLnJlc29sdmUodGhpcy5fY29tcGF0aWJsZUNvbnRyb2xsaW5nU1cpO1xuICAgICAgICAgICAgdGhpcy5fY29udHJvbGxpbmdEZWZlcnJlZC5yZXNvbHZlKHRoaXMuX2NvbXBhdGlibGVDb250cm9sbGluZ1NXKTtcbiAgICAgICAgICAgIHRoaXMuX2NvbXBhdGlibGVDb250cm9sbGluZ1NXLmFkZEV2ZW50TGlzdGVuZXIoXCJzdGF0ZWNoYW5nZVwiLCB0aGlzLl9vblN0YXRlQ2hhbmdlLCB7XG4gICAgICAgICAgICAgICAgb25jZTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgd2FpdGluZ1NXID0gdGhpcy5fcmVnaXN0cmF0aW9uLndhaXRpbmc7XG4gICAgICAgIGlmICh3YWl0aW5nU1cgJiYgdXJsc01hdGNoKHdhaXRpbmdTVy5zY3JpcHRVUkwsIHRoaXMuX3NjcmlwdFVSTC50b1N0cmluZygpKSkge1xuICAgICAgICAgICAgdGhpcy5fc3cgPSB3YWl0aW5nU1c7XG4gICAgICAgICAgICB2b2lkIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCk9PntcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IFNlcndpc3RFdmVudChcIndhaXRpbmdcIiwge1xuICAgICAgICAgICAgICAgICAgICBzdzogd2FpdGluZ1NXLFxuICAgICAgICAgICAgICAgICAgICB3YXNXYWl0aW5nQmVmb3JlUmVnaXN0ZXI6IHRydWVcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIud2FybihcIkEgc2VydmljZSB3b3JrZXIgd2FzIGFscmVhZHkgd2FpdGluZyB0byBhY3RpdmF0ZSBiZWZvcmUgdGhpcyBzY3JpcHQgd2FzIHJlZ2lzdGVyZWQuLi5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3N3KSB7XG4gICAgICAgICAgICB0aGlzLl9zd0RlZmVycmVkLnJlc29sdmUodGhpcy5fc3cpO1xuICAgICAgICAgICAgdGhpcy5fb3duU1dzLmFkZCh0aGlzLl9zdyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgbG9nZ2VyLmxvZyhcIlN1Y2Nlc3NmdWxseSByZWdpc3RlcmVkIHNlcnZpY2Ugd29ya2VyLlwiLCB0aGlzLl9zY3JpcHRVUkwudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICBpZiAobmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuY29udHJvbGxlcikge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jb21wYXRpYmxlQ29udHJvbGxpbmdTVykge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoXCJBIHNlcnZpY2Ugd29ya2VyIHdpdGggdGhlIHNhbWUgc2NyaXB0IFVSTCBpcyBhbHJlYWR5IGNvbnRyb2xsaW5nIHRoaXMgcGFnZS5cIik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKFwiQSBzZXJ2aWNlIHdvcmtlciB3aXRoIGEgZGlmZmVyZW50IHNjcmlwdCBVUkwgaXMgY3VycmVudGx5IGNvbnRyb2xsaW5nIHRoZSBwYWdlLiBUaGUgYnJvd3NlciBpcyBub3cgZmV0Y2hpbmcgdGhlIG5ldyBzY3JpcHQgbm93Li4uXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc0N1cnJlbnRQYWdlT3V0T2ZTY29wZSh0aGlzLl9yZWdpc3Rlck9wdGlvbnMuc2NvcGUgfHwgdGhpcy5fc2NyaXB0VVJMLnRvU3RyaW5nKCkpKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLndhcm4oXCJUaGUgY3VycmVudCBwYWdlIGlzIG5vdCBpbiBzY29wZSBmb3IgdGhlIHJlZ2lzdGVyZWQgc2VydmljZSB3b3JrZXIuIFdhcyB0aGlzIGEgbWlzdGFrZT9cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVnaXN0cmF0aW9uLmFkZEV2ZW50TGlzdGVuZXIoXCJ1cGRhdGVmb3VuZFwiLCB0aGlzLl9vblVwZGF0ZUZvdW5kKTtcbiAgICAgICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNvbnRyb2xsZXJjaGFuZ2VcIiwgdGhpcy5fb25Db250cm9sbGVyQ2hhbmdlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlZ2lzdHJhdGlvbjtcbiAgICB9XG4gICAgYXN5bmMgdXBkYXRlKCkge1xuICAgICAgICBpZiAoIXRoaXMuX3JlZ2lzdHJhdGlvbikge1xuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihcIkNhbm5vdCB1cGRhdGUgYSBTZXJ3aXN0IGluc3RhbmNlIHdpdGhvdXQgYmVpbmcgcmVnaXN0ZXJlZC4gUmVnaXN0ZXIgdGhlIFNlcndpc3QgaW5zdGFuY2UgZmlyc3QuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHRoaXMuX3JlZ2lzdHJhdGlvbi51cGRhdGUoKTtcbiAgICB9XG4gICAgZ2V0IGFjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZURlZmVycmVkLnByb21pc2U7XG4gICAgfVxuICAgIGdldCBjb250cm9sbGluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRyb2xsaW5nRGVmZXJyZWQucHJvbWlzZTtcbiAgICB9XG4gICAgZ2V0U1coKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdyAhPT0gdW5kZWZpbmVkID8gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX3N3KSA6IHRoaXMuX3N3RGVmZXJyZWQucHJvbWlzZTtcbiAgICB9XG4gICAgYXN5bmMgbWVzc2FnZVNXKGRhdGEpIHtcbiAgICAgICAgY29uc3Qgc3cgPSBhd2FpdCB0aGlzLmdldFNXKCk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlU1coc3csIGRhdGEpO1xuICAgIH1cbiAgICBtZXNzYWdlU2tpcFdhaXRpbmcoKSB7XG4gICAgICAgIGlmICh0aGlzLl9yZWdpc3RyYXRpb24/LndhaXRpbmcpIHtcbiAgICAgICAgICAgIHZvaWQgbWVzc2FnZVNXKHRoaXMuX3JlZ2lzdHJhdGlvbi53YWl0aW5nLCBTS0lQX1dBSVRJTkdfTUVTU0FHRSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2dldENvbnRyb2xsaW5nU1dJZkNvbXBhdGlibGUoKSB7XG4gICAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5jb250cm9sbGVyO1xuICAgICAgICBpZiAoY29udHJvbGxlciAmJiB1cmxzTWF0Y2goY29udHJvbGxlci5zY3JpcHRVUkwsIHRoaXMuX3NjcmlwdFVSTC50b1N0cmluZygpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRyb2xsZXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgYXN5bmMgX3JlZ2lzdGVyU2NyaXB0KCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVnID0gYXdhaXQgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVnaXN0ZXIodGhpcy5fc2NyaXB0VVJMLCB0aGlzLl9yZWdpc3Rlck9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy5fcmVnaXN0cmF0aW9uVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICAgICAgcmV0dXJuIHJlZztcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX29uVXBkYXRlRm91bmQgPSAob3JpZ2luYWxFdmVudCk9PntcbiAgICAgICAgY29uc3QgcmVnaXN0cmF0aW9uID0gdGhpcy5fcmVnaXN0cmF0aW9uO1xuICAgICAgICBjb25zdCBpbnN0YWxsaW5nU1cgPSByZWdpc3RyYXRpb24uaW5zdGFsbGluZztcbiAgICAgICAgY29uc3QgdXBkYXRlTGlrZWx5VHJpZ2dlcmVkRXh0ZXJuYWxseSA9IHRoaXMuX3VwZGF0ZUZvdW5kQ291bnQgPiAwIHx8ICF1cmxzTWF0Y2goaW5zdGFsbGluZ1NXLnNjcmlwdFVSTCwgdGhpcy5fc2NyaXB0VVJMLnRvU3RyaW5nKCkpIHx8IHBlcmZvcm1hbmNlLm5vdygpID4gdGhpcy5fcmVnaXN0cmF0aW9uVGltZSArIFJFR0lTVFJBVElPTl9USU1FT1VUX0RVUkFUSU9OO1xuICAgICAgICBpZiAodXBkYXRlTGlrZWx5VHJpZ2dlcmVkRXh0ZXJuYWxseSkge1xuICAgICAgICAgICAgdGhpcy5fZXh0ZXJuYWxTVyA9IGluc3RhbGxpbmdTVztcbiAgICAgICAgICAgIHJlZ2lzdHJhdGlvbi5yZW1vdmVFdmVudExpc3RlbmVyKFwidXBkYXRlZm91bmRcIiwgdGhpcy5fb25VcGRhdGVGb3VuZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zdyA9IGluc3RhbGxpbmdTVztcbiAgICAgICAgICAgIHRoaXMuX293blNXcy5hZGQoaW5zdGFsbGluZ1NXKTtcbiAgICAgICAgICAgIHRoaXMuX3N3RGVmZXJyZWQucmVzb2x2ZShpbnN0YWxsaW5nU1cpO1xuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pc1VwZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIubG9nKFwiVXBkYXRlZCBzZXJ2aWNlIHdvcmtlciBmb3VuZC4gSW5zdGFsbGluZyBub3cuLi5cIik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmxvZyhcIlNlcnZpY2Ugd29ya2VyIGlzIGluc3RhbGxpbmcuLi5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgU2Vyd2lzdEV2ZW50KFwiaW5zdGFsbGluZ1wiLCB7XG4gICAgICAgICAgICBzdzogaW5zdGFsbGluZ1NXLFxuICAgICAgICAgICAgb3JpZ2luYWxFdmVudCxcbiAgICAgICAgICAgIGlzRXh0ZXJuYWw6IHVwZGF0ZUxpa2VseVRyaWdnZXJlZEV4dGVybmFsbHksXG4gICAgICAgICAgICBpc1VwZGF0ZTogdGhpcy5faXNVcGRhdGVcbiAgICAgICAgfSkpO1xuICAgICAgICArK3RoaXMuX3VwZGF0ZUZvdW5kQ291bnQ7XG4gICAgICAgIGluc3RhbGxpbmdTVy5hZGRFdmVudExpc3RlbmVyKFwic3RhdGVjaGFuZ2VcIiwgdGhpcy5fb25TdGF0ZUNoYW5nZSk7XG4gICAgfTtcbiAgICBfb25TdGF0ZUNoYW5nZSA9IChvcmlnaW5hbEV2ZW50KT0+e1xuICAgICAgICBjb25zdCByZWdpc3RyYXRpb24gPSB0aGlzLl9yZWdpc3RyYXRpb247XG4gICAgICAgIGNvbnN0IHN3ID0gb3JpZ2luYWxFdmVudC50YXJnZXQ7XG4gICAgICAgIGNvbnN0IHsgc3RhdGUgfSA9IHN3O1xuICAgICAgICBjb25zdCBpc0V4dGVybmFsID0gc3cgPT09IHRoaXMuX2V4dGVybmFsU1c7XG4gICAgICAgIGNvbnN0IGV2ZW50UHJvcHMgPSB7XG4gICAgICAgICAgICBzdyxcbiAgICAgICAgICAgIGlzRXh0ZXJuYWwsXG4gICAgICAgICAgICBvcmlnaW5hbEV2ZW50XG4gICAgICAgIH07XG4gICAgICAgIGlmICghaXNFeHRlcm5hbCAmJiB0aGlzLl9pc1VwZGF0ZSkge1xuICAgICAgICAgICAgZXZlbnRQcm9wcy5pc1VwZGF0ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBTZXJ3aXN0RXZlbnQoc3RhdGUsIGV2ZW50UHJvcHMpKTtcbiAgICAgICAgaWYgKHN0YXRlID09PSBcImluc3RhbGxlZFwiKSB7XG4gICAgICAgICAgICB0aGlzLl93YWl0aW5nVGltZW91dCA9IHNlbGYuc2V0VGltZW91dCgoKT0+e1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZSA9PT0gXCJpbnN0YWxsZWRcIiAmJiByZWdpc3RyYXRpb24ud2FpdGluZyA9PT0gc3cpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBTZXJ3aXN0RXZlbnQoXCJ3YWl0aW5nXCIsIGV2ZW50UHJvcHMpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzRXh0ZXJuYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIud2FybihcIkFuIGV4dGVybmFsIHNlcnZpY2Ugd29ya2VyIGhhcyBpbnN0YWxsZWQgYnV0IGlzIFwiICsgXCJ3YWl0aW5nIGZvciB0aGlzIGNsaWVudCB0byBjbG9zZSBiZWZvcmUgYWN0aXZhdGluZy4uLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLndhcm4oXCJUaGUgc2VydmljZSB3b3JrZXIgaGFzIGluc3RhbGxlZCBidXQgaXMgd2FpdGluZyBcIiArIFwiZm9yIGV4aXN0aW5nIGNsaWVudHMgdG8gY2xvc2UgYmVmb3JlIGFjdGl2YXRpbmcuLi5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBXQUlUSU5HX1RJTUVPVVRfRFVSQVRJT04pO1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXRlID09PSBcImFjdGl2YXRpbmdcIikge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3dhaXRpbmdUaW1lb3V0KTtcbiAgICAgICAgICAgIGlmICghaXNFeHRlcm5hbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2FjdGl2ZURlZmVycmVkLnJlc29sdmUoc3cpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIHN3aXRjaChzdGF0ZSl7XG4gICAgICAgICAgICAgICAgY2FzZSBcImluc3RhbGxlZFwiOlxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNFeHRlcm5hbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLndhcm4oXCJBbiBleHRlcm5hbCBzZXJ2aWNlIHdvcmtlciBoYXMgaW5zdGFsbGVkLiBcIiArIFwiWW91IG1heSB3YW50IHRvIHN1Z2dlc3QgdXNlcnMgcmVsb2FkIHRoaXMgcGFnZS5cIik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIubG9nKFwiUmVnaXN0ZXJlZCBzZXJ2aWNlIHdvcmtlciBpbnN0YWxsZWQuXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJhY3RpdmF0ZWRcIjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRXh0ZXJuYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKFwiQW4gZXh0ZXJuYWwgc2VydmljZSB3b3JrZXIgaGFzIGFjdGl2YXRlZC5cIik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIubG9nKFwiUmVnaXN0ZXJlZCBzZXJ2aWNlIHdvcmtlciBhY3RpdmF0ZWQuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN3ICE9PSBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5jb250cm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLndhcm4oXCJUaGUgcmVnaXN0ZXJlZCBzZXJ2aWNlIHdvcmtlciBpcyBhY3RpdmUgYnV0IFwiICsgXCJub3QgeWV0IGNvbnRyb2xsaW5nIHRoZSBwYWdlLiBSZWxvYWQgb3IgcnVuIFwiICsgXCJgY2xpZW50cy5jbGFpbSgpYCBpbiB0aGUgc2VydmljZSB3b3JrZXIuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJyZWR1bmRhbnRcIjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN3ID09PSB0aGlzLl9jb21wYXRpYmxlQ29udHJvbGxpbmdTVykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmxvZyhcIlByZXZpb3VzbHkgY29udHJvbGxpbmcgc2VydmljZSB3b3JrZXIgbm93IHJlZHVuZGFudCFcIik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlzRXh0ZXJuYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5sb2coXCJSZWdpc3RlcmVkIHNlcnZpY2Ugd29ya2VyIG5vdyByZWR1bmRhbnQhXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBfb25Db250cm9sbGVyQ2hhbmdlID0gKG9yaWdpbmFsRXZlbnQpPT57XG4gICAgICAgIGNvbnN0IHN3ID0gdGhpcy5fc3c7XG4gICAgICAgIGNvbnN0IGlzRXh0ZXJuYWwgPSBzdyAhPT0gbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuY29udHJvbGxlcjtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBTZXJ3aXN0RXZlbnQoXCJjb250cm9sbGluZ1wiLCB7XG4gICAgICAgICAgICBpc0V4dGVybmFsLFxuICAgICAgICAgICAgb3JpZ2luYWxFdmVudCxcbiAgICAgICAgICAgIHN3LFxuICAgICAgICAgICAgaXNVcGRhdGU6IHRoaXMuX2lzVXBkYXRlXG4gICAgICAgIH0pKTtcbiAgICAgICAgaWYgKCFpc0V4dGVybmFsKSB7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmxvZyhcIlJlZ2lzdGVyZWQgc2VydmljZSB3b3JrZXIgbm93IGNvbnRyb2xsaW5nIHRoaXMgcGFnZS5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9jb250cm9sbGluZ0RlZmVycmVkLnJlc29sdmUoc3cpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBfb25NZXNzYWdlID0gYXN5bmMgKG9yaWdpbmFsRXZlbnQpPT57XG4gICAgICAgIGNvbnN0IHsgZGF0YSwgcG9ydHMsIHNvdXJjZSB9ID0gb3JpZ2luYWxFdmVudDtcbiAgICAgICAgYXdhaXQgdGhpcy5nZXRTVygpO1xuICAgICAgICBpZiAodGhpcy5fb3duU1dzLmhhcyhzb3VyY2UpKSB7XG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IFNlcndpc3RFdmVudChcIm1lc3NhZ2VcIiwge1xuICAgICAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudCxcbiAgICAgICAgICAgICAgICBwb3J0cyxcbiAgICAgICAgICAgICAgICBzdzogc291cmNlXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5leHBvcnQgeyBTZXJ3aXN0LCBTZXJ3aXN0RXZlbnQsIG1lc3NhZ2VTVyB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@serwist/window/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/serwist/dist/chunks/resultingClientExists.js":
/*!*******************************************************************!*\
  !*** ./node_modules/serwist/dist/chunks/resultingClientExists.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   r: () => (/* binding */ resultingClientExists)\n/* harmony export */ });\n/* harmony import */ var _waitUntil_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./waitUntil.js */ \"(app-pages-browser)/./node_modules/serwist/dist/chunks/waitUntil.js\");\n\n\nconst MAX_RETRY_TIME = 2000;\nasync function resultingClientExists(resultingClientId) {\n    if (!resultingClientId) {\n        return;\n    }\n    let existingWindows = await self.clients.matchAll({\n        type: \"window\"\n    });\n    const existingWindowIds = new Set(existingWindows.map((w)=>w.id));\n    let resultingWindow;\n    const startTime = performance.now();\n    while(performance.now() - startTime < MAX_RETRY_TIME){\n        existingWindows = await self.clients.matchAll({\n            type: \"window\"\n        });\n        resultingWindow = existingWindows.find((w)=>{\n            if (resultingClientId) {\n                return w.id === resultingClientId;\n            }\n            return !existingWindowIds.has(w.id);\n        });\n        if (resultingWindow) {\n            break;\n        }\n        await (0,_waitUntil_js__WEBPACK_IMPORTED_MODULE_0__.t)(100);\n    }\n    return resultingWindow;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zZXJ3aXN0L2Rpc3QvY2h1bmtzL3Jlc3VsdGluZ0NsaWVudEV4aXN0cy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE4Qzs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsY0FBYyxnREFBTztBQUNyQjtBQUNBO0FBQ0E7O0FBRXNDIiwic291cmNlcyI6WyIvVXNlcnMvcGl5dXNoLmRhZ2FAcG9zdG1hbi5jb20vRG9jdW1lbnRzL1Byb2plY3RzL3BpeXVzaC1kYWdhL2V2YS0yL3Nlc3Npb24xLWJ1aWxkLXRvZG8tY2FsZW5kYXIvbm9kZV9tb2R1bGVzL3Nlcndpc3QvZGlzdC9jaHVua3MvcmVzdWx0aW5nQ2xpZW50RXhpc3RzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHQgYXMgdGltZW91dCB9IGZyb20gJy4vd2FpdFVudGlsLmpzJztcblxuY29uc3QgTUFYX1JFVFJZX1RJTUUgPSAyMDAwO1xuYXN5bmMgZnVuY3Rpb24gcmVzdWx0aW5nQ2xpZW50RXhpc3RzKHJlc3VsdGluZ0NsaWVudElkKSB7XG4gICAgaWYgKCFyZXN1bHRpbmdDbGllbnRJZCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBleGlzdGluZ1dpbmRvd3MgPSBhd2FpdCBzZWxmLmNsaWVudHMubWF0Y2hBbGwoe1xuICAgICAgICB0eXBlOiBcIndpbmRvd1wiXG4gICAgfSk7XG4gICAgY29uc3QgZXhpc3RpbmdXaW5kb3dJZHMgPSBuZXcgU2V0KGV4aXN0aW5nV2luZG93cy5tYXAoKHcpPT53LmlkKSk7XG4gICAgbGV0IHJlc3VsdGluZ1dpbmRvdztcbiAgICBjb25zdCBzdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICB3aGlsZShwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0VGltZSA8IE1BWF9SRVRSWV9USU1FKXtcbiAgICAgICAgZXhpc3RpbmdXaW5kb3dzID0gYXdhaXQgc2VsZi5jbGllbnRzLm1hdGNoQWxsKHtcbiAgICAgICAgICAgIHR5cGU6IFwid2luZG93XCJcbiAgICAgICAgfSk7XG4gICAgICAgIHJlc3VsdGluZ1dpbmRvdyA9IGV4aXN0aW5nV2luZG93cy5maW5kKCh3KT0+e1xuICAgICAgICAgICAgaWYgKHJlc3VsdGluZ0NsaWVudElkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHcuaWQgPT09IHJlc3VsdGluZ0NsaWVudElkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICFleGlzdGluZ1dpbmRvd0lkcy5oYXMody5pZCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocmVzdWx0aW5nV2luZG93KSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCB0aW1lb3V0KDEwMCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRpbmdXaW5kb3c7XG59XG5cbmV4cG9ydCB7IHJlc3VsdGluZ0NsaWVudEV4aXN0cyBhcyByIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/serwist/dist/chunks/resultingClientExists.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/serwist/dist/chunks/waitUntil.js":
/*!*******************************************************!*\
  !*** ./node_modules/serwist/dist/chunks/waitUntil.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   D: () => (/* binding */ Deferred),\n/* harmony export */   S: () => (/* binding */ SerwistError),\n/* harmony export */   a: () => (/* binding */ clientsClaim),\n/* harmony export */   b: () => (/* binding */ cleanupOutdatedCaches),\n/* harmony export */   c: () => (/* binding */ cacheNames),\n/* harmony export */   d: () => (/* binding */ cacheMatchIgnoreParams),\n/* harmony export */   e: () => (/* binding */ executeQuotaErrorCallbacks),\n/* harmony export */   f: () => (/* binding */ finalAssertExports),\n/* harmony export */   g: () => (/* binding */ getFriendlyURL),\n/* harmony export */   h: () => (/* binding */ canConstructResponseFromBodyStream),\n/* harmony export */   l: () => (/* binding */ logger),\n/* harmony export */   q: () => (/* binding */ quotaErrorCallbacks),\n/* harmony export */   t: () => (/* binding */ timeout),\n/* harmony export */   w: () => (/* binding */ waitUntil)\n/* harmony export */ });\nconst messages = {\n    \"invalid-value\": ({ paramName, validValueDescription, value })=>{\n        if (!paramName || !validValueDescription) {\n            throw new Error(`Unexpected input to 'invalid-value' error.`);\n        }\n        return `The '${paramName}' parameter was given a value with an ` + `unexpected value. ${validValueDescription} Received a value of ` + `${JSON.stringify(value)}.`;\n    },\n    \"not-an-array\": ({ moduleName, className, funcName, paramName })=>{\n        if (!moduleName || !className || !funcName || !paramName) {\n            throw new Error(`Unexpected input to 'not-an-array' error.`);\n        }\n        return `The parameter '${paramName}' passed into ` + `'${moduleName}.${className}.${funcName}()' must be an array.`;\n    },\n    \"incorrect-type\": ({ expectedType, paramName, moduleName, className, funcName })=>{\n        if (!expectedType || !paramName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'incorrect-type' error.`);\n        }\n        const classNameStr = className ? `${className}.` : \"\";\n        return `The parameter '${paramName}' passed into ` + `'${moduleName}.${classNameStr}` + `${funcName}()' must be of type ${expectedType}.`;\n    },\n    \"incorrect-class\": ({ expectedClassName, paramName, moduleName, className, funcName, isReturnValueProblem })=>{\n        if (!expectedClassName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'incorrect-class' error.`);\n        }\n        const classNameStr = className ? `${className}.` : \"\";\n        if (isReturnValueProblem) {\n            return `The return value from '${moduleName}.${classNameStr}${funcName}()' must be an instance of class ${expectedClassName}.`;\n        }\n        return `The parameter '${paramName}' passed into ` + `'${moduleName}.${classNameStr}${funcName}()' ` + `must be an instance of class ${expectedClassName}.`;\n    },\n    \"missing-a-method\": ({ expectedMethod, paramName, moduleName, className, funcName })=>{\n        if (!expectedMethod || !paramName || !moduleName || !className || !funcName) {\n            throw new Error(`Unexpected input to 'missing-a-method' error.`);\n        }\n        return `${moduleName}.${className}.${funcName}() expected the ` + `'${paramName}' parameter to expose a '${expectedMethod}' method.`;\n    },\n    \"add-to-cache-list-unexpected-type\": ({ entry })=>{\n        return `An unexpected entry was passed to 'serwist.Serwist.addToPrecacheList()' The entry '${JSON.stringify(entry)}' isn't supported. You must supply an array of strings with one or more characters, objects with a url property or Request objects.`;\n    },\n    \"add-to-cache-list-conflicting-entries\": ({ firstEntry, secondEntry })=>{\n        if (!firstEntry || !secondEntry) {\n            throw new Error(\"Unexpected input to \" + `'add-to-cache-list-duplicate-entries' error.`);\n        }\n        return `Two of the entries passed to 'serwist.Serwist.addToPrecacheList()' had the URL ${firstEntry} but different revision details. Serwist is unable to cache and version the asset correctly. Please remove one of the entries.`;\n    },\n    \"plugin-error-request-will-fetch\": ({ thrownErrorMessage })=>{\n        if (!thrownErrorMessage) {\n            throw new Error(\"Unexpected input to \" + `'plugin-error-request-will-fetch', error.`);\n        }\n        return `An error was thrown by a plugin's 'requestWillFetch()' method. The thrown error message was: '${thrownErrorMessage}'.`;\n    },\n    \"invalid-cache-name\": ({ cacheNameId, value })=>{\n        if (!cacheNameId) {\n            throw new Error(`Expected a 'cacheNameId' for error 'invalid-cache-name'`);\n        }\n        return `You must provide a name containing at least one character for setCacheDetails({${cacheNameId}: '...'}). Received a value of '${JSON.stringify(value)}'`;\n    },\n    \"unregister-route-but-not-found-with-method\": ({ method })=>{\n        if (!method) {\n            throw new Error(\"Unexpected input to \" + `'unregister-route-but-not-found-with-method' error.`);\n        }\n        return `The route you're trying to unregister was not  previously registered for the method type '${method}'.`;\n    },\n    \"unregister-route-route-not-registered\": ()=>{\n        return `The route you're trying to unregister was not previously ` + \"registered.\";\n    },\n    \"queue-replay-failed\": ({ name })=>{\n        return `Replaying the background sync queue '${name}' failed.`;\n    },\n    \"duplicate-queue-name\": ({ name })=>{\n        return `The queue name '${name}' is already being used. All instances of 'serwist.BackgroundSyncQueue' must be given unique names.`;\n    },\n    \"expired-test-without-max-age\": ({ methodName, paramName })=>{\n        return `The '${methodName}()' method can only be used when the ` + `'${paramName}' is used in the constructor.`;\n    },\n    \"unsupported-route-type\": ({ moduleName, className, funcName, paramName })=>{\n        return `The supplied '${paramName}' parameter was an unsupported type. Please check the docs for ${moduleName}.${className}.${funcName} for valid input types.`;\n    },\n    \"not-array-of-class\": ({ value, expectedClass, moduleName, className, funcName, paramName })=>{\n        return `The supplied '${paramName}' parameter must be an array of '${expectedClass}' objects. Received '${JSON.stringify(value)},'. Please check the call to ${moduleName}.${className}.${funcName}() to fix the issue.`;\n    },\n    \"max-entries-or-age-required\": ({ moduleName, className, funcName })=>{\n        return `You must define either 'config.maxEntries' or 'config.maxAgeSeconds' in '${moduleName}.${className}.${funcName}'`;\n    },\n    \"statuses-or-headers-required\": ({ moduleName, className, funcName })=>{\n        return `You must define either 'config.statuses' or 'config.headers' in '${moduleName}.${className}.${funcName}'`;\n    },\n    \"invalid-string\": ({ moduleName, funcName, paramName })=>{\n        if (!paramName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'invalid-string' error.`);\n        }\n        return `When using strings, the '${paramName}' parameter must start with 'http' (for cross-origin matches) or '/' (for same-origin matches). Please see the docs for ${moduleName}.${funcName}() for more info.`;\n    },\n    \"channel-name-required\": ()=>{\n        return \"You must provide a channelName to construct a \" + \"BroadcastCacheUpdate instance.\";\n    },\n    \"invalid-responses-are-same-args\": ()=>{\n        return \"The arguments passed into responsesAreSame() appear to be \" + \"invalid. Please ensure valid Responses are used.\";\n    },\n    \"expire-custom-caches-only\": ()=>{\n        return `You must provide a 'cacheName' property when using the ` + \"expiration plugin with a runtime caching strategy.\";\n    },\n    \"unit-must-be-bytes\": ({ normalizedRangeHeader })=>{\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'unit-must-be-bytes' error.`);\n        }\n        return `The 'unit' portion of the Range header must be set to 'bytes'. The Range header provided was \"${normalizedRangeHeader}\"`;\n    },\n    \"single-range-only\": ({ normalizedRangeHeader })=>{\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'single-range-only' error.`);\n        }\n        return `Multiple ranges are not supported. Please use a  single start value, and optional end value. The Range header provided was \"${normalizedRangeHeader}\"`;\n    },\n    \"invalid-range-values\": ({ normalizedRangeHeader })=>{\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'invalid-range-values' error.`);\n        }\n        return `The Range header is missing both start and end values. At least one of those values is needed. The Range header provided was \"${normalizedRangeHeader}\"`;\n    },\n    \"no-range-header\": ()=>{\n        return \"No Range header was found in the Request provided.\";\n    },\n    \"range-not-satisfiable\": ({ size, start, end })=>{\n        return `The start (${start}) and end (${end}) values in the Range are ` + `not satisfiable by the cached response, which is ${size} bytes.`;\n    },\n    \"attempt-to-cache-non-get-request\": ({ url, method })=>{\n        return `Unable to cache '${url}' because it is a '${method}' request and only 'GET' requests can be cached.`;\n    },\n    \"cache-put-with-no-response\": ({ url })=>{\n        return `There was an attempt to cache '${url}' but the response was not defined.`;\n    },\n    \"no-response\": ({ url, error })=>{\n        let message = `The strategy could not generate a response for '${url}'.`;\n        if (error) {\n            message += ` The underlying error is ${error}.`;\n        }\n        return message;\n    },\n    \"bad-precaching-response\": ({ url, status })=>{\n        return `The precaching request for '${url}' failed${status ? ` with an HTTP status of ${status}.` : \".\"}`;\n    },\n    \"non-precached-url\": ({ url })=>{\n        return `'createHandlerBoundToURL(\"${url}\")' was called, but that URL is not precached. Please pass in a URL that is precached instead.`;\n    },\n    \"add-to-cache-list-conflicting-integrities\": ({ url })=>{\n        return `Two of the entries passed to 'serwist.Serwist.addToPrecacheList()' had the URL ${url} with different integrity values. Please remove one of them.`;\n    },\n    \"missing-precache-entry\": ({ cacheName, url })=>{\n        return `Unable to find a precached response in ${cacheName} for ${url}.`;\n    },\n    \"cross-origin-copy-response\": ({ origin })=>{\n        return `'@serwist/core.copyResponse()' can only be used with same-origin responses. It was passed a response with origin ${origin}.`;\n    },\n    \"opaque-streams-source\": ({ type })=>{\n        const message = `One of the '@serwist/streams' sources resulted in an '${type}' response.`;\n        if (type === \"opaqueredirect\") {\n            return `${message} Please do not use a navigation request that results in a redirect as a source.`;\n        }\n        return `${message} Please ensure your sources are CORS-enabled.`;\n    }\n};\n\nconst fallback = (code, ...args)=>{\n    let msg = code;\n    if (args.length > 0) {\n        msg += ` :: ${JSON.stringify(args)}`;\n    }\n    return msg;\n};\nconst generatorFunction = (code, details = {})=>{\n    const message = messages[code];\n    if (!message) {\n        throw new Error(`Unable to find message for code '${code}'.`);\n    }\n    return message(details);\n};\nconst messageGenerator =  false ? 0 : generatorFunction;\n\nclass SerwistError extends Error {\n    details;\n    constructor(errorCode, details){\n        const message = messageGenerator(errorCode, details);\n        super(message);\n        this.name = errorCode;\n        this.details = details;\n    }\n}\n\nconst isArray = (value, details)=>{\n    if (!Array.isArray(value)) {\n        throw new SerwistError(\"not-an-array\", details);\n    }\n};\nconst hasMethod = (object, expectedMethod, details)=>{\n    const type = typeof object[expectedMethod];\n    if (type !== \"function\") {\n        details.expectedMethod = expectedMethod;\n        throw new SerwistError(\"missing-a-method\", details);\n    }\n};\nconst isType = (object, expectedType, details)=>{\n    if (typeof object !== expectedType) {\n        details.expectedType = expectedType;\n        throw new SerwistError(\"incorrect-type\", details);\n    }\n};\nconst isInstance = (object, expectedClass, details)=>{\n    if (!(object instanceof expectedClass)) {\n        details.expectedClassName = expectedClass.name;\n        throw new SerwistError(\"incorrect-class\", details);\n    }\n};\nconst isOneOf = (value, validValues, details)=>{\n    if (!validValues.includes(value)) {\n        details.validValueDescription = `Valid values are ${JSON.stringify(validValues)}.`;\n        throw new SerwistError(\"invalid-value\", details);\n    }\n};\nconst isArrayOfClass = (value, expectedClass, details)=>{\n    const error = new SerwistError(\"not-array-of-class\", details);\n    if (!Array.isArray(value)) {\n        throw error;\n    }\n    for (const item of value){\n        if (!(item instanceof expectedClass)) {\n            throw error;\n        }\n    }\n};\nconst finalAssertExports =  false ? 0 : {\n    hasMethod,\n    isArray,\n    isInstance,\n    isOneOf,\n    isType,\n    isArrayOfClass\n};\n\nconst logger =  false || typeof self === \"undefined\" ? null : (()=>{\n    if (!(\"__WB_DISABLE_DEV_LOGS\" in globalThis)) {\n        self.__WB_DISABLE_DEV_LOGS = false;\n    }\n    let inGroup = false;\n    const methodToColorMap = {\n        debug: \"#7f8c8d\",\n        log: \"#2ecc71\",\n        warn: \"#f39c12\",\n        error: \"#c0392b\",\n        groupCollapsed: \"#3498db\",\n        groupEnd: null\n    };\n    const print = (method, args)=>{\n        if (self.__WB_DISABLE_DEV_LOGS) {\n            return;\n        }\n        if (method === \"groupCollapsed\") {\n            if (typeof navigator !== \"undefined\" && /^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n                console[method](...args);\n                return;\n            }\n        }\n        const styles = [\n            `background: ${methodToColorMap[method]}`,\n            \"border-radius: 0.5em\",\n            \"color: white\",\n            \"font-weight: bold\",\n            \"padding: 2px 0.5em\"\n        ];\n        const logPrefix = inGroup ? [] : [\n            \"%cserwist\",\n            styles.join(\";\")\n        ];\n        console[method](...logPrefix, ...args);\n        if (method === \"groupCollapsed\") {\n            inGroup = true;\n        }\n        if (method === \"groupEnd\") {\n            inGroup = false;\n        }\n    };\n    const loggerMethods = Object.keys(methodToColorMap);\n    return loggerMethods.reduce((api, method)=>{\n        api[method] = (...args)=>{\n            print(method, args);\n        };\n        return api;\n    }, {});\n})();\n\nconst getFriendlyURL = (url)=>{\n    const urlObj = new URL(String(url), location.href);\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), \"\");\n};\n\nconst _cacheNameDetails = {\n    googleAnalytics: \"googleAnalytics\",\n    precache: \"precache-v2\",\n    prefix: \"serwist\",\n    runtime: \"runtime\",\n    suffix: typeof registration !== \"undefined\" ? registration.scope : \"\"\n};\nconst _createCacheName = (cacheName)=>{\n    return [\n        _cacheNameDetails.prefix,\n        cacheName,\n        _cacheNameDetails.suffix\n    ].filter((value)=>value && value.length > 0).join(\"-\");\n};\nconst eachCacheNameDetail = (fn)=>{\n    for (const key of Object.keys(_cacheNameDetails)){\n        fn(key);\n    }\n};\nconst cacheNames = {\n    updateDetails: (details)=>{\n        eachCacheNameDetail((key)=>{\n            const detail = details[key];\n            if (typeof detail === \"string\") {\n                _cacheNameDetails[key] = detail;\n            }\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName)=>{\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName)=>{\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\n    },\n    getPrefix: ()=>{\n        return _cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName)=>{\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n    },\n    getSuffix: ()=>{\n        return _cacheNameDetails.suffix;\n    }\n};\n\nclass Deferred {\n    promise;\n    resolve;\n    reject;\n    constructor(){\n        this.promise = new Promise((resolve, reject)=>{\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\n\nfunction stripParams(fullURL, ignoreParams) {\n    const strippedURL = new URL(fullURL);\n    for (const param of ignoreParams){\n        strippedURL.searchParams.delete(param);\n    }\n    return strippedURL.href;\n}\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\n    if (request.url === strippedRequestURL) {\n        return cache.match(request, matchOptions);\n    }\n    const keysOptions = {\n        ...matchOptions,\n        ignoreSearch: true\n    };\n    const cacheKeys = await cache.keys(request, keysOptions);\n    for (const cacheKey of cacheKeys){\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n        if (strippedRequestURL === strippedCacheKeyURL) {\n            return cache.match(cacheKey, matchOptions);\n        }\n    }\n    return;\n}\n\nconst quotaErrorCallbacks = new Set();\n\nconst executeQuotaErrorCallbacks = async ()=>{\n    if (true) {\n        logger.log(`About to run ${quotaErrorCallbacks.size} callbacks to clean up caches.`);\n    }\n    for (const callback of quotaErrorCallbacks){\n        await callback();\n        if (true) {\n            logger.log(callback, \"is complete.\");\n        }\n    }\n    if (true) {\n        logger.log(\"Finished running callbacks.\");\n    }\n};\n\nfunction timeout(ms) {\n    return new Promise((resolve)=>setTimeout(resolve, ms));\n}\n\nlet supportStatus;\nfunction canConstructResponseFromBodyStream() {\n    if (supportStatus === undefined) {\n        const testResponse = new Response(\"\");\n        if (\"body\" in testResponse) {\n            try {\n                new Response(testResponse.body);\n                supportStatus = true;\n            } catch  {\n                supportStatus = false;\n            }\n        }\n        supportStatus = false;\n    }\n    return supportStatus;\n}\n\nconst SUBSTRING_TO_FIND = \"-precache-\";\nconst deleteOutdatedCaches = async (currentPrecacheName, substringToFind = SUBSTRING_TO_FIND)=>{\n    const cacheNames = await self.caches.keys();\n    const cacheNamesToDelete = cacheNames.filter((cacheName)=>{\n        return cacheName.includes(substringToFind) && cacheName.includes(self.registration.scope) && cacheName !== currentPrecacheName;\n    });\n    await Promise.all(cacheNamesToDelete.map((cacheName)=>self.caches.delete(cacheName)));\n    return cacheNamesToDelete;\n};\n\nconst cleanupOutdatedCaches = (cacheName)=>{\n    self.addEventListener(\"activate\", (event)=>{\n        event.waitUntil(deleteOutdatedCaches(cacheNames.getPrecacheName(cacheName)).then((cachesDeleted)=>{\n            if (true) {\n                if (cachesDeleted.length > 0) {\n                    logger.log(\"The following out-of-date precaches were cleaned up automatically:\", cachesDeleted);\n                }\n            }\n        }));\n    });\n};\n\nconst clientsClaim = ()=>{\n    self.addEventListener(\"activate\", ()=>self.clients.claim());\n};\n\nconst waitUntil = (event, asyncFn)=>{\n    const returnPromise = asyncFn();\n    event.waitUntil(returnPromise);\n    return returnPromise;\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zZXJ3aXN0L2Rpc3QvY2h1bmtzL3dhaXRVbnRpbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0Esd0JBQXdCLHlDQUF5QztBQUNqRTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsVUFBVSwrREFBK0QsdUJBQXVCLDJCQUEyQixzQkFBc0I7QUFDeEssS0FBSztBQUNMLHVCQUF1Qiw0Q0FBNEM7QUFDbkU7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLFVBQVUsc0JBQXNCLFdBQVcsR0FBRyxVQUFVLEdBQUcsU0FBUztBQUNyRyxLQUFLO0FBQ0wseUJBQXlCLDBEQUEwRDtBQUNuRjtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsVUFBVTtBQUN0RCxpQ0FBaUMsVUFBVSxzQkFBc0IsV0FBVyxHQUFHLGFBQWEsT0FBTyxTQUFTLHNCQUFzQixhQUFhO0FBQy9JLEtBQUs7QUFDTCwwQkFBMEIscUZBQXFGO0FBQy9HO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxVQUFVO0FBQ3REO0FBQ0EsNkNBQTZDLFdBQVcsR0FBRyxhQUFhLEVBQUUsU0FBUyxtQ0FBbUMsa0JBQWtCO0FBQ3hJO0FBQ0EsaUNBQWlDLFVBQVUsc0JBQXNCLFdBQVcsR0FBRyxhQUFhLEVBQUUsU0FBUyx3Q0FBd0Msa0JBQWtCO0FBQ2pLLEtBQUs7QUFDTCwyQkFBMkIsNERBQTREO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixXQUFXLEdBQUcsVUFBVSxHQUFHLFNBQVMsd0JBQXdCLFVBQVUsMkJBQTJCLGVBQWU7QUFDbEksS0FBSztBQUNMLDRDQUE0QyxPQUFPO0FBQ25ELHFHQUFxRyxzQkFBc0I7QUFDM0gsS0FBSztBQUNMLGdEQUFnRCx5QkFBeUI7QUFDekU7QUFDQTtBQUNBO0FBQ0EsaUdBQWlHLFlBQVk7QUFDN0csS0FBSztBQUNMLDBDQUEwQyxvQkFBb0I7QUFDOUQ7QUFDQTtBQUNBO0FBQ0EsZ0hBQWdILG1CQUFtQjtBQUNuSSxLQUFLO0FBQ0wsNkJBQTZCLG9CQUFvQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQSwrRkFBK0YsRUFBRSxZQUFZLFFBQVEsMEJBQTBCLHNCQUFzQjtBQUNySyxLQUFLO0FBQ0wscURBQXFELFFBQVE7QUFDN0Q7QUFDQTtBQUNBO0FBQ0EsNEdBQTRHLE9BQU87QUFDbkgsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsOEJBQThCLE1BQU07QUFDcEMsdURBQXVELEtBQUs7QUFDNUQsS0FBSztBQUNMLCtCQUErQixNQUFNO0FBQ3JDLGtDQUFrQyxLQUFLO0FBQ3ZDLEtBQUs7QUFDTCx1Q0FBdUMsdUJBQXVCO0FBQzlELHVCQUF1QixXQUFXLDZDQUE2QyxVQUFVO0FBQ3pGLEtBQUs7QUFDTCxpQ0FBaUMsNENBQTRDO0FBQzdFLGdDQUFnQyxVQUFVLGlFQUFpRSxXQUFXLEdBQUcsVUFBVSxHQUFHLFVBQVU7QUFDaEosS0FBSztBQUNMLDZCQUE2QixrRUFBa0U7QUFDL0YsZ0NBQWdDLFVBQVUsbUNBQW1DLGNBQWMsdUJBQXVCLHNCQUFzQiwrQkFBK0IsV0FBVyxHQUFHLFVBQVUsR0FBRyxTQUFTO0FBQzNNLEtBQUs7QUFDTCxzQ0FBc0MsaUNBQWlDO0FBQ3ZFLDJGQUEyRixXQUFXLEdBQUcsVUFBVSxHQUFHLFNBQVM7QUFDL0gsS0FBSztBQUNMLHVDQUF1QyxpQ0FBaUM7QUFDeEUsbUZBQW1GLFdBQVcsR0FBRyxVQUFVLEdBQUcsU0FBUztBQUN2SCxLQUFLO0FBQ0wseUJBQXlCLGlDQUFpQztBQUMxRDtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsVUFBVSwwSEFBMEgsV0FBVyxHQUFHLFNBQVM7QUFDdE0sS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMLDZCQUE2Qix1QkFBdUI7QUFDcEQ7QUFDQTtBQUNBO0FBQ0EsZ0hBQWdILHNCQUFzQjtBQUN0SSxLQUFLO0FBQ0wsNEJBQTRCLHVCQUF1QjtBQUNuRDtBQUNBO0FBQ0E7QUFDQSw4SUFBOEksc0JBQXNCO0FBQ3BLLEtBQUs7QUFDTCwrQkFBK0IsdUJBQXVCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBLGdKQUFnSixzQkFBc0I7QUFDdEssS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsZ0NBQWdDLGtCQUFrQjtBQUNsRCw2QkFBNkIsTUFBTSxhQUFhLElBQUksa0ZBQWtGLE1BQU07QUFDNUksS0FBSztBQUNMLDJDQUEyQyxhQUFhO0FBQ3hELG1DQUFtQyxJQUFJLHFCQUFxQixPQUFPO0FBQ25FLEtBQUs7QUFDTCxxQ0FBcUMsS0FBSztBQUMxQyxpREFBaUQsSUFBSTtBQUNyRCxLQUFLO0FBQ0wsc0JBQXNCLFlBQVk7QUFDbEMseUVBQXlFLElBQUk7QUFDN0U7QUFDQSxtREFBbUQsTUFBTTtBQUN6RDtBQUNBO0FBQ0EsS0FBSztBQUNMLGtDQUFrQyxhQUFhO0FBQy9DLDhDQUE4QyxJQUFJLFVBQVUsb0NBQW9DLE9BQU8sU0FBUztBQUNoSCxLQUFLO0FBQ0wsNEJBQTRCLEtBQUs7QUFDakMsNENBQTRDLElBQUk7QUFDaEQsS0FBSztBQUNMLG9EQUFvRCxLQUFLO0FBQ3pELGlHQUFpRyxLQUFLO0FBQ3RHLEtBQUs7QUFDTCxpQ0FBaUMsZ0JBQWdCO0FBQ2pELHlEQUF5RCxXQUFXLE1BQU0sSUFBSTtBQUM5RSxLQUFLO0FBQ0wscUNBQXFDLFFBQVE7QUFDN0MsbUlBQW1JLE9BQU87QUFDMUksS0FBSztBQUNMLGdDQUFnQyxNQUFNO0FBQ3RDLGlGQUFpRixLQUFLO0FBQ3RGO0FBQ0Esc0JBQXNCLFNBQVM7QUFDL0I7QUFDQSxrQkFBa0IsU0FBUztBQUMzQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixxQkFBcUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0E7QUFDQSw0REFBNEQsS0FBSztBQUNqRTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsTUFBcUMsR0FBRyxDQUFROztBQUV6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCw0QkFBNEI7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixNQUFxQyxHQUFHLENBQUk7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZUFBZSxNQUFxQztBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLHlCQUF5QjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLLElBQUk7QUFDVCxDQUFDOztBQUVEO0FBQ0E7QUFDQSw4Q0FBOEMsZ0JBQWdCO0FBQzlEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsUUFBUSxJQUFxQztBQUM3QyxtQ0FBbUMsMEJBQTBCO0FBQzdEO0FBQ0E7QUFDQTtBQUNBLFlBQVksSUFBcUM7QUFDakQ7QUFDQTtBQUNBO0FBQ0EsUUFBUSxJQUFxQztBQUM3QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLElBQXFDO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFc1UiLCJzb3VyY2VzIjpbIi9Vc2Vycy9waXl1c2guZGFnYUBwb3N0bWFuLmNvbS9Eb2N1bWVudHMvUHJvamVjdHMvcGl5dXNoLWRhZ2EvZXZhLTIvc2Vzc2lvbjEtYnVpbGQtdG9kby1jYWxlbmRhci9ub2RlX21vZHVsZXMvc2Vyd2lzdC9kaXN0L2NodW5rcy93YWl0VW50aWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbWVzc2FnZXMgPSB7XG4gICAgXCJpbnZhbGlkLXZhbHVlXCI6ICh7IHBhcmFtTmFtZSwgdmFsaWRWYWx1ZURlc2NyaXB0aW9uLCB2YWx1ZSB9KT0+e1xuICAgICAgICBpZiAoIXBhcmFtTmFtZSB8fCAhdmFsaWRWYWx1ZURlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgaW5wdXQgdG8gJ2ludmFsaWQtdmFsdWUnIGVycm9yLmApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgVGhlICcke3BhcmFtTmFtZX0nIHBhcmFtZXRlciB3YXMgZ2l2ZW4gYSB2YWx1ZSB3aXRoIGFuIGAgKyBgdW5leHBlY3RlZCB2YWx1ZS4gJHt2YWxpZFZhbHVlRGVzY3JpcHRpb259IFJlY2VpdmVkIGEgdmFsdWUgb2YgYCArIGAke0pTT04uc3RyaW5naWZ5KHZhbHVlKX0uYDtcbiAgICB9LFxuICAgIFwibm90LWFuLWFycmF5XCI6ICh7IG1vZHVsZU5hbWUsIGNsYXNzTmFtZSwgZnVuY05hbWUsIHBhcmFtTmFtZSB9KT0+e1xuICAgICAgICBpZiAoIW1vZHVsZU5hbWUgfHwgIWNsYXNzTmFtZSB8fCAhZnVuY05hbWUgfHwgIXBhcmFtTmFtZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIGlucHV0IHRvICdub3QtYW4tYXJyYXknIGVycm9yLmApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgVGhlIHBhcmFtZXRlciAnJHtwYXJhbU5hbWV9JyBwYXNzZWQgaW50byBgICsgYCcke21vZHVsZU5hbWV9LiR7Y2xhc3NOYW1lfS4ke2Z1bmNOYW1lfSgpJyBtdXN0IGJlIGFuIGFycmF5LmA7XG4gICAgfSxcbiAgICBcImluY29ycmVjdC10eXBlXCI6ICh7IGV4cGVjdGVkVHlwZSwgcGFyYW1OYW1lLCBtb2R1bGVOYW1lLCBjbGFzc05hbWUsIGZ1bmNOYW1lIH0pPT57XG4gICAgICAgIGlmICghZXhwZWN0ZWRUeXBlIHx8ICFwYXJhbU5hbWUgfHwgIW1vZHVsZU5hbWUgfHwgIWZ1bmNOYW1lKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgaW5wdXQgdG8gJ2luY29ycmVjdC10eXBlJyBlcnJvci5gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjbGFzc05hbWVTdHIgPSBjbGFzc05hbWUgPyBgJHtjbGFzc05hbWV9LmAgOiBcIlwiO1xuICAgICAgICByZXR1cm4gYFRoZSBwYXJhbWV0ZXIgJyR7cGFyYW1OYW1lfScgcGFzc2VkIGludG8gYCArIGAnJHttb2R1bGVOYW1lfS4ke2NsYXNzTmFtZVN0cn1gICsgYCR7ZnVuY05hbWV9KCknIG11c3QgYmUgb2YgdHlwZSAke2V4cGVjdGVkVHlwZX0uYDtcbiAgICB9LFxuICAgIFwiaW5jb3JyZWN0LWNsYXNzXCI6ICh7IGV4cGVjdGVkQ2xhc3NOYW1lLCBwYXJhbU5hbWUsIG1vZHVsZU5hbWUsIGNsYXNzTmFtZSwgZnVuY05hbWUsIGlzUmV0dXJuVmFsdWVQcm9ibGVtIH0pPT57XG4gICAgICAgIGlmICghZXhwZWN0ZWRDbGFzc05hbWUgfHwgIW1vZHVsZU5hbWUgfHwgIWZ1bmNOYW1lKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgaW5wdXQgdG8gJ2luY29ycmVjdC1jbGFzcycgZXJyb3IuYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2xhc3NOYW1lU3RyID0gY2xhc3NOYW1lID8gYCR7Y2xhc3NOYW1lfS5gIDogXCJcIjtcbiAgICAgICAgaWYgKGlzUmV0dXJuVmFsdWVQcm9ibGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gYFRoZSByZXR1cm4gdmFsdWUgZnJvbSAnJHttb2R1bGVOYW1lfS4ke2NsYXNzTmFtZVN0cn0ke2Z1bmNOYW1lfSgpJyBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIGNsYXNzICR7ZXhwZWN0ZWRDbGFzc05hbWV9LmA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGBUaGUgcGFyYW1ldGVyICcke3BhcmFtTmFtZX0nIHBhc3NlZCBpbnRvIGAgKyBgJyR7bW9kdWxlTmFtZX0uJHtjbGFzc05hbWVTdHJ9JHtmdW5jTmFtZX0oKScgYCArIGBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIGNsYXNzICR7ZXhwZWN0ZWRDbGFzc05hbWV9LmA7XG4gICAgfSxcbiAgICBcIm1pc3NpbmctYS1tZXRob2RcIjogKHsgZXhwZWN0ZWRNZXRob2QsIHBhcmFtTmFtZSwgbW9kdWxlTmFtZSwgY2xhc3NOYW1lLCBmdW5jTmFtZSB9KT0+e1xuICAgICAgICBpZiAoIWV4cGVjdGVkTWV0aG9kIHx8ICFwYXJhbU5hbWUgfHwgIW1vZHVsZU5hbWUgfHwgIWNsYXNzTmFtZSB8fCAhZnVuY05hbWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCBpbnB1dCB0byAnbWlzc2luZy1hLW1ldGhvZCcgZXJyb3IuYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGAke21vZHVsZU5hbWV9LiR7Y2xhc3NOYW1lfS4ke2Z1bmNOYW1lfSgpIGV4cGVjdGVkIHRoZSBgICsgYCcke3BhcmFtTmFtZX0nIHBhcmFtZXRlciB0byBleHBvc2UgYSAnJHtleHBlY3RlZE1ldGhvZH0nIG1ldGhvZC5gO1xuICAgIH0sXG4gICAgXCJhZGQtdG8tY2FjaGUtbGlzdC11bmV4cGVjdGVkLXR5cGVcIjogKHsgZW50cnkgfSk9PntcbiAgICAgICAgcmV0dXJuIGBBbiB1bmV4cGVjdGVkIGVudHJ5IHdhcyBwYXNzZWQgdG8gJ3Nlcndpc3QuU2Vyd2lzdC5hZGRUb1ByZWNhY2hlTGlzdCgpJyBUaGUgZW50cnkgJyR7SlNPTi5zdHJpbmdpZnkoZW50cnkpfScgaXNuJ3Qgc3VwcG9ydGVkLiBZb3UgbXVzdCBzdXBwbHkgYW4gYXJyYXkgb2Ygc3RyaW5ncyB3aXRoIG9uZSBvciBtb3JlIGNoYXJhY3RlcnMsIG9iamVjdHMgd2l0aCBhIHVybCBwcm9wZXJ0eSBvciBSZXF1ZXN0IG9iamVjdHMuYDtcbiAgICB9LFxuICAgIFwiYWRkLXRvLWNhY2hlLWxpc3QtY29uZmxpY3RpbmctZW50cmllc1wiOiAoeyBmaXJzdEVudHJ5LCBzZWNvbmRFbnRyeSB9KT0+e1xuICAgICAgICBpZiAoIWZpcnN0RW50cnkgfHwgIXNlY29uZEVudHJ5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIGlucHV0IHRvIFwiICsgYCdhZGQtdG8tY2FjaGUtbGlzdC1kdXBsaWNhdGUtZW50cmllcycgZXJyb3IuYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGBUd28gb2YgdGhlIGVudHJpZXMgcGFzc2VkIHRvICdzZXJ3aXN0LlNlcndpc3QuYWRkVG9QcmVjYWNoZUxpc3QoKScgaGFkIHRoZSBVUkwgJHtmaXJzdEVudHJ5fSBidXQgZGlmZmVyZW50IHJldmlzaW9uIGRldGFpbHMuIFNlcndpc3QgaXMgdW5hYmxlIHRvIGNhY2hlIGFuZCB2ZXJzaW9uIHRoZSBhc3NldCBjb3JyZWN0bHkuIFBsZWFzZSByZW1vdmUgb25lIG9mIHRoZSBlbnRyaWVzLmA7XG4gICAgfSxcbiAgICBcInBsdWdpbi1lcnJvci1yZXF1ZXN0LXdpbGwtZmV0Y2hcIjogKHsgdGhyb3duRXJyb3JNZXNzYWdlIH0pPT57XG4gICAgICAgIGlmICghdGhyb3duRXJyb3JNZXNzYWdlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIGlucHV0IHRvIFwiICsgYCdwbHVnaW4tZXJyb3ItcmVxdWVzdC13aWxsLWZldGNoJywgZXJyb3IuYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGBBbiBlcnJvciB3YXMgdGhyb3duIGJ5IGEgcGx1Z2luJ3MgJ3JlcXVlc3RXaWxsRmV0Y2goKScgbWV0aG9kLiBUaGUgdGhyb3duIGVycm9yIG1lc3NhZ2Ugd2FzOiAnJHt0aHJvd25FcnJvck1lc3NhZ2V9Jy5gO1xuICAgIH0sXG4gICAgXCJpbnZhbGlkLWNhY2hlLW5hbWVcIjogKHsgY2FjaGVOYW1lSWQsIHZhbHVlIH0pPT57XG4gICAgICAgIGlmICghY2FjaGVOYW1lSWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgYSAnY2FjaGVOYW1lSWQnIGZvciBlcnJvciAnaW52YWxpZC1jYWNoZS1uYW1lJ2ApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgWW91IG11c3QgcHJvdmlkZSBhIG5hbWUgY29udGFpbmluZyBhdCBsZWFzdCBvbmUgY2hhcmFjdGVyIGZvciBzZXRDYWNoZURldGFpbHMoeyR7Y2FjaGVOYW1lSWR9OiAnLi4uJ30pLiBSZWNlaXZlZCBhIHZhbHVlIG9mICcke0pTT04uc3RyaW5naWZ5KHZhbHVlKX0nYDtcbiAgICB9LFxuICAgIFwidW5yZWdpc3Rlci1yb3V0ZS1idXQtbm90LWZvdW5kLXdpdGgtbWV0aG9kXCI6ICh7IG1ldGhvZCB9KT0+e1xuICAgICAgICBpZiAoIW1ldGhvZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCBpbnB1dCB0byBcIiArIGAndW5yZWdpc3Rlci1yb3V0ZS1idXQtbm90LWZvdW5kLXdpdGgtbWV0aG9kJyBlcnJvci5gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYFRoZSByb3V0ZSB5b3UncmUgdHJ5aW5nIHRvIHVucmVnaXN0ZXIgd2FzIG5vdCAgcHJldmlvdXNseSByZWdpc3RlcmVkIGZvciB0aGUgbWV0aG9kIHR5cGUgJyR7bWV0aG9kfScuYDtcbiAgICB9LFxuICAgIFwidW5yZWdpc3Rlci1yb3V0ZS1yb3V0ZS1ub3QtcmVnaXN0ZXJlZFwiOiAoKT0+e1xuICAgICAgICByZXR1cm4gYFRoZSByb3V0ZSB5b3UncmUgdHJ5aW5nIHRvIHVucmVnaXN0ZXIgd2FzIG5vdCBwcmV2aW91c2x5IGAgKyBcInJlZ2lzdGVyZWQuXCI7XG4gICAgfSxcbiAgICBcInF1ZXVlLXJlcGxheS1mYWlsZWRcIjogKHsgbmFtZSB9KT0+e1xuICAgICAgICByZXR1cm4gYFJlcGxheWluZyB0aGUgYmFja2dyb3VuZCBzeW5jIHF1ZXVlICcke25hbWV9JyBmYWlsZWQuYDtcbiAgICB9LFxuICAgIFwiZHVwbGljYXRlLXF1ZXVlLW5hbWVcIjogKHsgbmFtZSB9KT0+e1xuICAgICAgICByZXR1cm4gYFRoZSBxdWV1ZSBuYW1lICcke25hbWV9JyBpcyBhbHJlYWR5IGJlaW5nIHVzZWQuIEFsbCBpbnN0YW5jZXMgb2YgJ3Nlcndpc3QuQmFja2dyb3VuZFN5bmNRdWV1ZScgbXVzdCBiZSBnaXZlbiB1bmlxdWUgbmFtZXMuYDtcbiAgICB9LFxuICAgIFwiZXhwaXJlZC10ZXN0LXdpdGhvdXQtbWF4LWFnZVwiOiAoeyBtZXRob2ROYW1lLCBwYXJhbU5hbWUgfSk9PntcbiAgICAgICAgcmV0dXJuIGBUaGUgJyR7bWV0aG9kTmFtZX0oKScgbWV0aG9kIGNhbiBvbmx5IGJlIHVzZWQgd2hlbiB0aGUgYCArIGAnJHtwYXJhbU5hbWV9JyBpcyB1c2VkIGluIHRoZSBjb25zdHJ1Y3Rvci5gO1xuICAgIH0sXG4gICAgXCJ1bnN1cHBvcnRlZC1yb3V0ZS10eXBlXCI6ICh7IG1vZHVsZU5hbWUsIGNsYXNzTmFtZSwgZnVuY05hbWUsIHBhcmFtTmFtZSB9KT0+e1xuICAgICAgICByZXR1cm4gYFRoZSBzdXBwbGllZCAnJHtwYXJhbU5hbWV9JyBwYXJhbWV0ZXIgd2FzIGFuIHVuc3VwcG9ydGVkIHR5cGUuIFBsZWFzZSBjaGVjayB0aGUgZG9jcyBmb3IgJHttb2R1bGVOYW1lfS4ke2NsYXNzTmFtZX0uJHtmdW5jTmFtZX0gZm9yIHZhbGlkIGlucHV0IHR5cGVzLmA7XG4gICAgfSxcbiAgICBcIm5vdC1hcnJheS1vZi1jbGFzc1wiOiAoeyB2YWx1ZSwgZXhwZWN0ZWRDbGFzcywgbW9kdWxlTmFtZSwgY2xhc3NOYW1lLCBmdW5jTmFtZSwgcGFyYW1OYW1lIH0pPT57XG4gICAgICAgIHJldHVybiBgVGhlIHN1cHBsaWVkICcke3BhcmFtTmFtZX0nIHBhcmFtZXRlciBtdXN0IGJlIGFuIGFycmF5IG9mICcke2V4cGVjdGVkQ2xhc3N9JyBvYmplY3RzLiBSZWNlaXZlZCAnJHtKU09OLnN0cmluZ2lmeSh2YWx1ZSl9LCcuIFBsZWFzZSBjaGVjayB0aGUgY2FsbCB0byAke21vZHVsZU5hbWV9LiR7Y2xhc3NOYW1lfS4ke2Z1bmNOYW1lfSgpIHRvIGZpeCB0aGUgaXNzdWUuYDtcbiAgICB9LFxuICAgIFwibWF4LWVudHJpZXMtb3ItYWdlLXJlcXVpcmVkXCI6ICh7IG1vZHVsZU5hbWUsIGNsYXNzTmFtZSwgZnVuY05hbWUgfSk9PntcbiAgICAgICAgcmV0dXJuIGBZb3UgbXVzdCBkZWZpbmUgZWl0aGVyICdjb25maWcubWF4RW50cmllcycgb3IgJ2NvbmZpZy5tYXhBZ2VTZWNvbmRzJyBpbiAnJHttb2R1bGVOYW1lfS4ke2NsYXNzTmFtZX0uJHtmdW5jTmFtZX0nYDtcbiAgICB9LFxuICAgIFwic3RhdHVzZXMtb3ItaGVhZGVycy1yZXF1aXJlZFwiOiAoeyBtb2R1bGVOYW1lLCBjbGFzc05hbWUsIGZ1bmNOYW1lIH0pPT57XG4gICAgICAgIHJldHVybiBgWW91IG11c3QgZGVmaW5lIGVpdGhlciAnY29uZmlnLnN0YXR1c2VzJyBvciAnY29uZmlnLmhlYWRlcnMnIGluICcke21vZHVsZU5hbWV9LiR7Y2xhc3NOYW1lfS4ke2Z1bmNOYW1lfSdgO1xuICAgIH0sXG4gICAgXCJpbnZhbGlkLXN0cmluZ1wiOiAoeyBtb2R1bGVOYW1lLCBmdW5jTmFtZSwgcGFyYW1OYW1lIH0pPT57XG4gICAgICAgIGlmICghcGFyYW1OYW1lIHx8ICFtb2R1bGVOYW1lIHx8ICFmdW5jTmFtZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIGlucHV0IHRvICdpbnZhbGlkLXN0cmluZycgZXJyb3IuYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGBXaGVuIHVzaW5nIHN0cmluZ3MsIHRoZSAnJHtwYXJhbU5hbWV9JyBwYXJhbWV0ZXIgbXVzdCBzdGFydCB3aXRoICdodHRwJyAoZm9yIGNyb3NzLW9yaWdpbiBtYXRjaGVzKSBvciAnLycgKGZvciBzYW1lLW9yaWdpbiBtYXRjaGVzKS4gUGxlYXNlIHNlZSB0aGUgZG9jcyBmb3IgJHttb2R1bGVOYW1lfS4ke2Z1bmNOYW1lfSgpIGZvciBtb3JlIGluZm8uYDtcbiAgICB9LFxuICAgIFwiY2hhbm5lbC1uYW1lLXJlcXVpcmVkXCI6ICgpPT57XG4gICAgICAgIHJldHVybiBcIllvdSBtdXN0IHByb3ZpZGUgYSBjaGFubmVsTmFtZSB0byBjb25zdHJ1Y3QgYSBcIiArIFwiQnJvYWRjYXN0Q2FjaGVVcGRhdGUgaW5zdGFuY2UuXCI7XG4gICAgfSxcbiAgICBcImludmFsaWQtcmVzcG9uc2VzLWFyZS1zYW1lLWFyZ3NcIjogKCk9PntcbiAgICAgICAgcmV0dXJuIFwiVGhlIGFyZ3VtZW50cyBwYXNzZWQgaW50byByZXNwb25zZXNBcmVTYW1lKCkgYXBwZWFyIHRvIGJlIFwiICsgXCJpbnZhbGlkLiBQbGVhc2UgZW5zdXJlIHZhbGlkIFJlc3BvbnNlcyBhcmUgdXNlZC5cIjtcbiAgICB9LFxuICAgIFwiZXhwaXJlLWN1c3RvbS1jYWNoZXMtb25seVwiOiAoKT0+e1xuICAgICAgICByZXR1cm4gYFlvdSBtdXN0IHByb3ZpZGUgYSAnY2FjaGVOYW1lJyBwcm9wZXJ0eSB3aGVuIHVzaW5nIHRoZSBgICsgXCJleHBpcmF0aW9uIHBsdWdpbiB3aXRoIGEgcnVudGltZSBjYWNoaW5nIHN0cmF0ZWd5LlwiO1xuICAgIH0sXG4gICAgXCJ1bml0LW11c3QtYmUtYnl0ZXNcIjogKHsgbm9ybWFsaXplZFJhbmdlSGVhZGVyIH0pPT57XG4gICAgICAgIGlmICghbm9ybWFsaXplZFJhbmdlSGVhZGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgaW5wdXQgdG8gJ3VuaXQtbXVzdC1iZS1ieXRlcycgZXJyb3IuYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGBUaGUgJ3VuaXQnIHBvcnRpb24gb2YgdGhlIFJhbmdlIGhlYWRlciBtdXN0IGJlIHNldCB0byAnYnl0ZXMnLiBUaGUgUmFuZ2UgaGVhZGVyIHByb3ZpZGVkIHdhcyBcIiR7bm9ybWFsaXplZFJhbmdlSGVhZGVyfVwiYDtcbiAgICB9LFxuICAgIFwic2luZ2xlLXJhbmdlLW9ubHlcIjogKHsgbm9ybWFsaXplZFJhbmdlSGVhZGVyIH0pPT57XG4gICAgICAgIGlmICghbm9ybWFsaXplZFJhbmdlSGVhZGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgaW5wdXQgdG8gJ3NpbmdsZS1yYW5nZS1vbmx5JyBlcnJvci5gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYE11bHRpcGxlIHJhbmdlcyBhcmUgbm90IHN1cHBvcnRlZC4gUGxlYXNlIHVzZSBhICBzaW5nbGUgc3RhcnQgdmFsdWUsIGFuZCBvcHRpb25hbCBlbmQgdmFsdWUuIFRoZSBSYW5nZSBoZWFkZXIgcHJvdmlkZWQgd2FzIFwiJHtub3JtYWxpemVkUmFuZ2VIZWFkZXJ9XCJgO1xuICAgIH0sXG4gICAgXCJpbnZhbGlkLXJhbmdlLXZhbHVlc1wiOiAoeyBub3JtYWxpemVkUmFuZ2VIZWFkZXIgfSk9PntcbiAgICAgICAgaWYgKCFub3JtYWxpemVkUmFuZ2VIZWFkZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCBpbnB1dCB0byAnaW52YWxpZC1yYW5nZS12YWx1ZXMnIGVycm9yLmApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgVGhlIFJhbmdlIGhlYWRlciBpcyBtaXNzaW5nIGJvdGggc3RhcnQgYW5kIGVuZCB2YWx1ZXMuIEF0IGxlYXN0IG9uZSBvZiB0aG9zZSB2YWx1ZXMgaXMgbmVlZGVkLiBUaGUgUmFuZ2UgaGVhZGVyIHByb3ZpZGVkIHdhcyBcIiR7bm9ybWFsaXplZFJhbmdlSGVhZGVyfVwiYDtcbiAgICB9LFxuICAgIFwibm8tcmFuZ2UtaGVhZGVyXCI6ICgpPT57XG4gICAgICAgIHJldHVybiBcIk5vIFJhbmdlIGhlYWRlciB3YXMgZm91bmQgaW4gdGhlIFJlcXVlc3QgcHJvdmlkZWQuXCI7XG4gICAgfSxcbiAgICBcInJhbmdlLW5vdC1zYXRpc2ZpYWJsZVwiOiAoeyBzaXplLCBzdGFydCwgZW5kIH0pPT57XG4gICAgICAgIHJldHVybiBgVGhlIHN0YXJ0ICgke3N0YXJ0fSkgYW5kIGVuZCAoJHtlbmR9KSB2YWx1ZXMgaW4gdGhlIFJhbmdlIGFyZSBgICsgYG5vdCBzYXRpc2ZpYWJsZSBieSB0aGUgY2FjaGVkIHJlc3BvbnNlLCB3aGljaCBpcyAke3NpemV9IGJ5dGVzLmA7XG4gICAgfSxcbiAgICBcImF0dGVtcHQtdG8tY2FjaGUtbm9uLWdldC1yZXF1ZXN0XCI6ICh7IHVybCwgbWV0aG9kIH0pPT57XG4gICAgICAgIHJldHVybiBgVW5hYmxlIHRvIGNhY2hlICcke3VybH0nIGJlY2F1c2UgaXQgaXMgYSAnJHttZXRob2R9JyByZXF1ZXN0IGFuZCBvbmx5ICdHRVQnIHJlcXVlc3RzIGNhbiBiZSBjYWNoZWQuYDtcbiAgICB9LFxuICAgIFwiY2FjaGUtcHV0LXdpdGgtbm8tcmVzcG9uc2VcIjogKHsgdXJsIH0pPT57XG4gICAgICAgIHJldHVybiBgVGhlcmUgd2FzIGFuIGF0dGVtcHQgdG8gY2FjaGUgJyR7dXJsfScgYnV0IHRoZSByZXNwb25zZSB3YXMgbm90IGRlZmluZWQuYDtcbiAgICB9LFxuICAgIFwibm8tcmVzcG9uc2VcIjogKHsgdXJsLCBlcnJvciB9KT0+e1xuICAgICAgICBsZXQgbWVzc2FnZSA9IGBUaGUgc3RyYXRlZ3kgY291bGQgbm90IGdlbmVyYXRlIGEgcmVzcG9uc2UgZm9yICcke3VybH0nLmA7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgbWVzc2FnZSArPSBgIFRoZSB1bmRlcmx5aW5nIGVycm9yIGlzICR7ZXJyb3J9LmA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBcImJhZC1wcmVjYWNoaW5nLXJlc3BvbnNlXCI6ICh7IHVybCwgc3RhdHVzIH0pPT57XG4gICAgICAgIHJldHVybiBgVGhlIHByZWNhY2hpbmcgcmVxdWVzdCBmb3IgJyR7dXJsfScgZmFpbGVkJHtzdGF0dXMgPyBgIHdpdGggYW4gSFRUUCBzdGF0dXMgb2YgJHtzdGF0dXN9LmAgOiBcIi5cIn1gO1xuICAgIH0sXG4gICAgXCJub24tcHJlY2FjaGVkLXVybFwiOiAoeyB1cmwgfSk9PntcbiAgICAgICAgcmV0dXJuIGAnY3JlYXRlSGFuZGxlckJvdW5kVG9VUkwoXCIke3VybH1cIiknIHdhcyBjYWxsZWQsIGJ1dCB0aGF0IFVSTCBpcyBub3QgcHJlY2FjaGVkLiBQbGVhc2UgcGFzcyBpbiBhIFVSTCB0aGF0IGlzIHByZWNhY2hlZCBpbnN0ZWFkLmA7XG4gICAgfSxcbiAgICBcImFkZC10by1jYWNoZS1saXN0LWNvbmZsaWN0aW5nLWludGVncml0aWVzXCI6ICh7IHVybCB9KT0+e1xuICAgICAgICByZXR1cm4gYFR3byBvZiB0aGUgZW50cmllcyBwYXNzZWQgdG8gJ3Nlcndpc3QuU2Vyd2lzdC5hZGRUb1ByZWNhY2hlTGlzdCgpJyBoYWQgdGhlIFVSTCAke3VybH0gd2l0aCBkaWZmZXJlbnQgaW50ZWdyaXR5IHZhbHVlcy4gUGxlYXNlIHJlbW92ZSBvbmUgb2YgdGhlbS5gO1xuICAgIH0sXG4gICAgXCJtaXNzaW5nLXByZWNhY2hlLWVudHJ5XCI6ICh7IGNhY2hlTmFtZSwgdXJsIH0pPT57XG4gICAgICAgIHJldHVybiBgVW5hYmxlIHRvIGZpbmQgYSBwcmVjYWNoZWQgcmVzcG9uc2UgaW4gJHtjYWNoZU5hbWV9IGZvciAke3VybH0uYDtcbiAgICB9LFxuICAgIFwiY3Jvc3Mtb3JpZ2luLWNvcHktcmVzcG9uc2VcIjogKHsgb3JpZ2luIH0pPT57XG4gICAgICAgIHJldHVybiBgJ0BzZXJ3aXN0L2NvcmUuY29weVJlc3BvbnNlKCknIGNhbiBvbmx5IGJlIHVzZWQgd2l0aCBzYW1lLW9yaWdpbiByZXNwb25zZXMuIEl0IHdhcyBwYXNzZWQgYSByZXNwb25zZSB3aXRoIG9yaWdpbiAke29yaWdpbn0uYDtcbiAgICB9LFxuICAgIFwib3BhcXVlLXN0cmVhbXMtc291cmNlXCI6ICh7IHR5cGUgfSk9PntcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGBPbmUgb2YgdGhlICdAc2Vyd2lzdC9zdHJlYW1zJyBzb3VyY2VzIHJlc3VsdGVkIGluIGFuICcke3R5cGV9JyByZXNwb25zZS5gO1xuICAgICAgICBpZiAodHlwZSA9PT0gXCJvcGFxdWVyZWRpcmVjdFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7bWVzc2FnZX0gUGxlYXNlIGRvIG5vdCB1c2UgYSBuYXZpZ2F0aW9uIHJlcXVlc3QgdGhhdCByZXN1bHRzIGluIGEgcmVkaXJlY3QgYXMgYSBzb3VyY2UuYDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7bWVzc2FnZX0gUGxlYXNlIGVuc3VyZSB5b3VyIHNvdXJjZXMgYXJlIENPUlMtZW5hYmxlZC5gO1xuICAgIH1cbn07XG5cbmNvbnN0IGZhbGxiYWNrID0gKGNvZGUsIC4uLmFyZ3MpPT57XG4gICAgbGV0IG1zZyA9IGNvZGU7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICBtc2cgKz0gYCA6OiAke0pTT04uc3RyaW5naWZ5KGFyZ3MpfWA7XG4gICAgfVxuICAgIHJldHVybiBtc2c7XG59O1xuY29uc3QgZ2VuZXJhdG9yRnVuY3Rpb24gPSAoY29kZSwgZGV0YWlscyA9IHt9KT0+e1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBtZXNzYWdlc1tjb2RlXTtcbiAgICBpZiAoIW1lc3NhZ2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gZmluZCBtZXNzYWdlIGZvciBjb2RlICcke2NvZGV9Jy5gKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2UoZGV0YWlscyk7XG59O1xuY29uc3QgbWVzc2FnZUdlbmVyYXRvciA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZhbGxiYWNrIDogZ2VuZXJhdG9yRnVuY3Rpb247XG5cbmNsYXNzIFNlcndpc3RFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBkZXRhaWxzO1xuICAgIGNvbnN0cnVjdG9yKGVycm9yQ29kZSwgZGV0YWlscyl7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBtZXNzYWdlR2VuZXJhdG9yKGVycm9yQ29kZSwgZGV0YWlscyk7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSBlcnJvckNvZGU7XG4gICAgICAgIHRoaXMuZGV0YWlscyA9IGRldGFpbHM7XG4gICAgfVxufVxuXG5jb25zdCBpc0FycmF5ID0gKHZhbHVlLCBkZXRhaWxzKT0+e1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFNlcndpc3RFcnJvcihcIm5vdC1hbi1hcnJheVwiLCBkZXRhaWxzKTtcbiAgICB9XG59O1xuY29uc3QgaGFzTWV0aG9kID0gKG9iamVjdCwgZXhwZWN0ZWRNZXRob2QsIGRldGFpbHMpPT57XG4gICAgY29uc3QgdHlwZSA9IHR5cGVvZiBvYmplY3RbZXhwZWN0ZWRNZXRob2RdO1xuICAgIGlmICh0eXBlICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgZGV0YWlscy5leHBlY3RlZE1ldGhvZCA9IGV4cGVjdGVkTWV0aG9kO1xuICAgICAgICB0aHJvdyBuZXcgU2Vyd2lzdEVycm9yKFwibWlzc2luZy1hLW1ldGhvZFwiLCBkZXRhaWxzKTtcbiAgICB9XG59O1xuY29uc3QgaXNUeXBlID0gKG9iamVjdCwgZXhwZWN0ZWRUeXBlLCBkZXRhaWxzKT0+e1xuICAgIGlmICh0eXBlb2Ygb2JqZWN0ICE9PSBleHBlY3RlZFR5cGUpIHtcbiAgICAgICAgZGV0YWlscy5leHBlY3RlZFR5cGUgPSBleHBlY3RlZFR5cGU7XG4gICAgICAgIHRocm93IG5ldyBTZXJ3aXN0RXJyb3IoXCJpbmNvcnJlY3QtdHlwZVwiLCBkZXRhaWxzKTtcbiAgICB9XG59O1xuY29uc3QgaXNJbnN0YW5jZSA9IChvYmplY3QsIGV4cGVjdGVkQ2xhc3MsIGRldGFpbHMpPT57XG4gICAgaWYgKCEob2JqZWN0IGluc3RhbmNlb2YgZXhwZWN0ZWRDbGFzcykpIHtcbiAgICAgICAgZGV0YWlscy5leHBlY3RlZENsYXNzTmFtZSA9IGV4cGVjdGVkQ2xhc3MubmFtZTtcbiAgICAgICAgdGhyb3cgbmV3IFNlcndpc3RFcnJvcihcImluY29ycmVjdC1jbGFzc1wiLCBkZXRhaWxzKTtcbiAgICB9XG59O1xuY29uc3QgaXNPbmVPZiA9ICh2YWx1ZSwgdmFsaWRWYWx1ZXMsIGRldGFpbHMpPT57XG4gICAgaWYgKCF2YWxpZFZhbHVlcy5pbmNsdWRlcyh2YWx1ZSkpIHtcbiAgICAgICAgZGV0YWlscy52YWxpZFZhbHVlRGVzY3JpcHRpb24gPSBgVmFsaWQgdmFsdWVzIGFyZSAke0pTT04uc3RyaW5naWZ5KHZhbGlkVmFsdWVzKX0uYDtcbiAgICAgICAgdGhyb3cgbmV3IFNlcndpc3RFcnJvcihcImludmFsaWQtdmFsdWVcIiwgZGV0YWlscyk7XG4gICAgfVxufTtcbmNvbnN0IGlzQXJyYXlPZkNsYXNzID0gKHZhbHVlLCBleHBlY3RlZENsYXNzLCBkZXRhaWxzKT0+e1xuICAgIGNvbnN0IGVycm9yID0gbmV3IFNlcndpc3RFcnJvcihcIm5vdC1hcnJheS1vZi1jbGFzc1wiLCBkZXRhaWxzKTtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdmFsdWUpe1xuICAgICAgICBpZiAoIShpdGVtIGluc3RhbmNlb2YgZXhwZWN0ZWRDbGFzcykpIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxufTtcbmNvbnN0IGZpbmFsQXNzZXJ0RXhwb3J0cyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IG51bGwgOiB7XG4gICAgaGFzTWV0aG9kLFxuICAgIGlzQXJyYXksXG4gICAgaXNJbnN0YW5jZSxcbiAgICBpc09uZU9mLFxuICAgIGlzVHlwZSxcbiAgICBpc0FycmF5T2ZDbGFzc1xufTtcblxuY29uc3QgbG9nZ2VyID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiIHx8IHR5cGVvZiBzZWxmID09PSBcInVuZGVmaW5lZFwiID8gbnVsbCA6ICgoKT0+e1xuICAgIGlmICghKFwiX19XQl9ESVNBQkxFX0RFVl9MT0dTXCIgaW4gZ2xvYmFsVGhpcykpIHtcbiAgICAgICAgc2VsZi5fX1dCX0RJU0FCTEVfREVWX0xPR1MgPSBmYWxzZTtcbiAgICB9XG4gICAgbGV0IGluR3JvdXAgPSBmYWxzZTtcbiAgICBjb25zdCBtZXRob2RUb0NvbG9yTWFwID0ge1xuICAgICAgICBkZWJ1ZzogXCIjN2Y4YzhkXCIsXG4gICAgICAgIGxvZzogXCIjMmVjYzcxXCIsXG4gICAgICAgIHdhcm46IFwiI2YzOWMxMlwiLFxuICAgICAgICBlcnJvcjogXCIjYzAzOTJiXCIsXG4gICAgICAgIGdyb3VwQ29sbGFwc2VkOiBcIiMzNDk4ZGJcIixcbiAgICAgICAgZ3JvdXBFbmQ6IG51bGxcbiAgICB9O1xuICAgIGNvbnN0IHByaW50ID0gKG1ldGhvZCwgYXJncyk9PntcbiAgICAgICAgaWYgKHNlbGYuX19XQl9ESVNBQkxFX0RFVl9MT0dTKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJncm91cENvbGxhcHNlZFwiKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gXCJ1bmRlZmluZWRcIiAmJiAvXigoPyFjaHJvbWV8YW5kcm9pZCkuKSpzYWZhcmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZVttZXRob2RdKC4uLmFyZ3MpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdHlsZXMgPSBbXG4gICAgICAgICAgICBgYmFja2dyb3VuZDogJHttZXRob2RUb0NvbG9yTWFwW21ldGhvZF19YCxcbiAgICAgICAgICAgIFwiYm9yZGVyLXJhZGl1czogMC41ZW1cIixcbiAgICAgICAgICAgIFwiY29sb3I6IHdoaXRlXCIsXG4gICAgICAgICAgICBcImZvbnQtd2VpZ2h0OiBib2xkXCIsXG4gICAgICAgICAgICBcInBhZGRpbmc6IDJweCAwLjVlbVwiXG4gICAgICAgIF07XG4gICAgICAgIGNvbnN0IGxvZ1ByZWZpeCA9IGluR3JvdXAgPyBbXSA6IFtcbiAgICAgICAgICAgIFwiJWNzZXJ3aXN0XCIsXG4gICAgICAgICAgICBzdHlsZXMuam9pbihcIjtcIilcbiAgICAgICAgXTtcbiAgICAgICAgY29uc29sZVttZXRob2RdKC4uLmxvZ1ByZWZpeCwgLi4uYXJncyk7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwiZ3JvdXBDb2xsYXBzZWRcIikge1xuICAgICAgICAgICAgaW5Hcm91cCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJncm91cEVuZFwiKSB7XG4gICAgICAgICAgICBpbkdyb3VwID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGxvZ2dlck1ldGhvZHMgPSBPYmplY3Qua2V5cyhtZXRob2RUb0NvbG9yTWFwKTtcbiAgICByZXR1cm4gbG9nZ2VyTWV0aG9kcy5yZWR1Y2UoKGFwaSwgbWV0aG9kKT0+e1xuICAgICAgICBhcGlbbWV0aG9kXSA9ICguLi5hcmdzKT0+e1xuICAgICAgICAgICAgcHJpbnQobWV0aG9kLCBhcmdzKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGFwaTtcbiAgICB9LCB7fSk7XG59KSgpO1xuXG5jb25zdCBnZXRGcmllbmRseVVSTCA9ICh1cmwpPT57XG4gICAgY29uc3QgdXJsT2JqID0gbmV3IFVSTChTdHJpbmcodXJsKSwgbG9jYXRpb24uaHJlZik7XG4gICAgcmV0dXJuIHVybE9iai5ocmVmLnJlcGxhY2UobmV3IFJlZ0V4cChgXiR7bG9jYXRpb24ub3JpZ2lufWApLCBcIlwiKTtcbn07XG5cbmNvbnN0IF9jYWNoZU5hbWVEZXRhaWxzID0ge1xuICAgIGdvb2dsZUFuYWx5dGljczogXCJnb29nbGVBbmFseXRpY3NcIixcbiAgICBwcmVjYWNoZTogXCJwcmVjYWNoZS12MlwiLFxuICAgIHByZWZpeDogXCJzZXJ3aXN0XCIsXG4gICAgcnVudGltZTogXCJydW50aW1lXCIsXG4gICAgc3VmZml4OiB0eXBlb2YgcmVnaXN0cmF0aW9uICE9PSBcInVuZGVmaW5lZFwiID8gcmVnaXN0cmF0aW9uLnNjb3BlIDogXCJcIlxufTtcbmNvbnN0IF9jcmVhdGVDYWNoZU5hbWUgPSAoY2FjaGVOYW1lKT0+e1xuICAgIHJldHVybiBbXG4gICAgICAgIF9jYWNoZU5hbWVEZXRhaWxzLnByZWZpeCxcbiAgICAgICAgY2FjaGVOYW1lLFxuICAgICAgICBfY2FjaGVOYW1lRGV0YWlscy5zdWZmaXhcbiAgICBdLmZpbHRlcigodmFsdWUpPT52YWx1ZSAmJiB2YWx1ZS5sZW5ndGggPiAwKS5qb2luKFwiLVwiKTtcbn07XG5jb25zdCBlYWNoQ2FjaGVOYW1lRGV0YWlsID0gKGZuKT0+e1xuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKF9jYWNoZU5hbWVEZXRhaWxzKSl7XG4gICAgICAgIGZuKGtleSk7XG4gICAgfVxufTtcbmNvbnN0IGNhY2hlTmFtZXMgPSB7XG4gICAgdXBkYXRlRGV0YWlsczogKGRldGFpbHMpPT57XG4gICAgICAgIGVhY2hDYWNoZU5hbWVEZXRhaWwoKGtleSk9PntcbiAgICAgICAgICAgIGNvbnN0IGRldGFpbCA9IGRldGFpbHNba2V5XTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGV0YWlsID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgX2NhY2hlTmFtZURldGFpbHNba2V5XSA9IGRldGFpbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXRHb29nbGVBbmFseXRpY3NOYW1lOiAodXNlckNhY2hlTmFtZSk9PntcbiAgICAgICAgcmV0dXJuIHVzZXJDYWNoZU5hbWUgfHwgX2NyZWF0ZUNhY2hlTmFtZShfY2FjaGVOYW1lRGV0YWlscy5nb29nbGVBbmFseXRpY3MpO1xuICAgIH0sXG4gICAgZ2V0UHJlY2FjaGVOYW1lOiAodXNlckNhY2hlTmFtZSk9PntcbiAgICAgICAgcmV0dXJuIHVzZXJDYWNoZU5hbWUgfHwgX2NyZWF0ZUNhY2hlTmFtZShfY2FjaGVOYW1lRGV0YWlscy5wcmVjYWNoZSk7XG4gICAgfSxcbiAgICBnZXRQcmVmaXg6ICgpPT57XG4gICAgICAgIHJldHVybiBfY2FjaGVOYW1lRGV0YWlscy5wcmVmaXg7XG4gICAgfSxcbiAgICBnZXRSdW50aW1lTmFtZTogKHVzZXJDYWNoZU5hbWUpPT57XG4gICAgICAgIHJldHVybiB1c2VyQ2FjaGVOYW1lIHx8IF9jcmVhdGVDYWNoZU5hbWUoX2NhY2hlTmFtZURldGFpbHMucnVudGltZSk7XG4gICAgfSxcbiAgICBnZXRTdWZmaXg6ICgpPT57XG4gICAgICAgIHJldHVybiBfY2FjaGVOYW1lRGV0YWlscy5zdWZmaXg7XG4gICAgfVxufTtcblxuY2xhc3MgRGVmZXJyZWQge1xuICAgIHByb21pc2U7XG4gICAgcmVzb2x2ZTtcbiAgICByZWplY3Q7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCk9PntcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgICAgICB0aGlzLnJlamVjdCA9IHJlamVjdDtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzdHJpcFBhcmFtcyhmdWxsVVJMLCBpZ25vcmVQYXJhbXMpIHtcbiAgICBjb25zdCBzdHJpcHBlZFVSTCA9IG5ldyBVUkwoZnVsbFVSTCk7XG4gICAgZm9yIChjb25zdCBwYXJhbSBvZiBpZ25vcmVQYXJhbXMpe1xuICAgICAgICBzdHJpcHBlZFVSTC5zZWFyY2hQYXJhbXMuZGVsZXRlKHBhcmFtKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cmlwcGVkVVJMLmhyZWY7XG59XG5hc3luYyBmdW5jdGlvbiBjYWNoZU1hdGNoSWdub3JlUGFyYW1zKGNhY2hlLCByZXF1ZXN0LCBpZ25vcmVQYXJhbXMsIG1hdGNoT3B0aW9ucykge1xuICAgIGNvbnN0IHN0cmlwcGVkUmVxdWVzdFVSTCA9IHN0cmlwUGFyYW1zKHJlcXVlc3QudXJsLCBpZ25vcmVQYXJhbXMpO1xuICAgIGlmIChyZXF1ZXN0LnVybCA9PT0gc3RyaXBwZWRSZXF1ZXN0VVJMKSB7XG4gICAgICAgIHJldHVybiBjYWNoZS5tYXRjaChyZXF1ZXN0LCBtYXRjaE9wdGlvbnMpO1xuICAgIH1cbiAgICBjb25zdCBrZXlzT3B0aW9ucyA9IHtcbiAgICAgICAgLi4ubWF0Y2hPcHRpb25zLFxuICAgICAgICBpZ25vcmVTZWFyY2g6IHRydWVcbiAgICB9O1xuICAgIGNvbnN0IGNhY2hlS2V5cyA9IGF3YWl0IGNhY2hlLmtleXMocmVxdWVzdCwga2V5c09wdGlvbnMpO1xuICAgIGZvciAoY29uc3QgY2FjaGVLZXkgb2YgY2FjaGVLZXlzKXtcbiAgICAgICAgY29uc3Qgc3RyaXBwZWRDYWNoZUtleVVSTCA9IHN0cmlwUGFyYW1zKGNhY2hlS2V5LnVybCwgaWdub3JlUGFyYW1zKTtcbiAgICAgICAgaWYgKHN0cmlwcGVkUmVxdWVzdFVSTCA9PT0gc3RyaXBwZWRDYWNoZUtleVVSTCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhY2hlLm1hdGNoKGNhY2hlS2V5LCBtYXRjaE9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybjtcbn1cblxuY29uc3QgcXVvdGFFcnJvckNhbGxiYWNrcyA9IG5ldyBTZXQoKTtcblxuY29uc3QgZXhlY3V0ZVF1b3RhRXJyb3JDYWxsYmFja3MgPSBhc3luYyAoKT0+e1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgbG9nZ2VyLmxvZyhgQWJvdXQgdG8gcnVuICR7cXVvdGFFcnJvckNhbGxiYWNrcy5zaXplfSBjYWxsYmFja3MgdG8gY2xlYW4gdXAgY2FjaGVzLmApO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGNhbGxiYWNrIG9mIHF1b3RhRXJyb3JDYWxsYmFja3Mpe1xuICAgICAgICBhd2FpdCBjYWxsYmFjaygpO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICBsb2dnZXIubG9nKGNhbGxiYWNrLCBcImlzIGNvbXBsZXRlLlwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGxvZ2dlci5sb2coXCJGaW5pc2hlZCBydW5uaW5nIGNhbGxiYWNrcy5cIik7XG4gICAgfVxufTtcblxuZnVuY3Rpb24gdGltZW91dChtcykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSk9PnNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKTtcbn1cblxubGV0IHN1cHBvcnRTdGF0dXM7XG5mdW5jdGlvbiBjYW5Db25zdHJ1Y3RSZXNwb25zZUZyb21Cb2R5U3RyZWFtKCkge1xuICAgIGlmIChzdXBwb3J0U3RhdHVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgdGVzdFJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKFwiXCIpO1xuICAgICAgICBpZiAoXCJib2R5XCIgaW4gdGVzdFJlc3BvbnNlKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG5ldyBSZXNwb25zZSh0ZXN0UmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICAgICAgc3VwcG9ydFN0YXR1cyA9IHRydWU7XG4gICAgICAgICAgICB9IGNhdGNoICB7XG4gICAgICAgICAgICAgICAgc3VwcG9ydFN0YXR1cyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN1cHBvcnRTdGF0dXMgPSBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cHBvcnRTdGF0dXM7XG59XG5cbmNvbnN0IFNVQlNUUklOR19UT19GSU5EID0gXCItcHJlY2FjaGUtXCI7XG5jb25zdCBkZWxldGVPdXRkYXRlZENhY2hlcyA9IGFzeW5jIChjdXJyZW50UHJlY2FjaGVOYW1lLCBzdWJzdHJpbmdUb0ZpbmQgPSBTVUJTVFJJTkdfVE9fRklORCk9PntcbiAgICBjb25zdCBjYWNoZU5hbWVzID0gYXdhaXQgc2VsZi5jYWNoZXMua2V5cygpO1xuICAgIGNvbnN0IGNhY2hlTmFtZXNUb0RlbGV0ZSA9IGNhY2hlTmFtZXMuZmlsdGVyKChjYWNoZU5hbWUpPT57XG4gICAgICAgIHJldHVybiBjYWNoZU5hbWUuaW5jbHVkZXMoc3Vic3RyaW5nVG9GaW5kKSAmJiBjYWNoZU5hbWUuaW5jbHVkZXMoc2VsZi5yZWdpc3RyYXRpb24uc2NvcGUpICYmIGNhY2hlTmFtZSAhPT0gY3VycmVudFByZWNhY2hlTmFtZTtcbiAgICB9KTtcbiAgICBhd2FpdCBQcm9taXNlLmFsbChjYWNoZU5hbWVzVG9EZWxldGUubWFwKChjYWNoZU5hbWUpPT5zZWxmLmNhY2hlcy5kZWxldGUoY2FjaGVOYW1lKSkpO1xuICAgIHJldHVybiBjYWNoZU5hbWVzVG9EZWxldGU7XG59O1xuXG5jb25zdCBjbGVhbnVwT3V0ZGF0ZWRDYWNoZXMgPSAoY2FjaGVOYW1lKT0+e1xuICAgIHNlbGYuYWRkRXZlbnRMaXN0ZW5lcihcImFjdGl2YXRlXCIsIChldmVudCk9PntcbiAgICAgICAgZXZlbnQud2FpdFVudGlsKGRlbGV0ZU91dGRhdGVkQ2FjaGVzKGNhY2hlTmFtZXMuZ2V0UHJlY2FjaGVOYW1lKGNhY2hlTmFtZSkpLnRoZW4oKGNhY2hlc0RlbGV0ZWQpPT57XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNhY2hlc0RlbGV0ZWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIubG9nKFwiVGhlIGZvbGxvd2luZyBvdXQtb2YtZGF0ZSBwcmVjYWNoZXMgd2VyZSBjbGVhbmVkIHVwIGF1dG9tYXRpY2FsbHk6XCIsIGNhY2hlc0RlbGV0ZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH0pO1xufTtcblxuY29uc3QgY2xpZW50c0NsYWltID0gKCk9PntcbiAgICBzZWxmLmFkZEV2ZW50TGlzdGVuZXIoXCJhY3RpdmF0ZVwiLCAoKT0+c2VsZi5jbGllbnRzLmNsYWltKCkpO1xufTtcblxuY29uc3Qgd2FpdFVudGlsID0gKGV2ZW50LCBhc3luY0ZuKT0+e1xuICAgIGNvbnN0IHJldHVyblByb21pc2UgPSBhc3luY0ZuKCk7XG4gICAgZXZlbnQud2FpdFVudGlsKHJldHVyblByb21pc2UpO1xuICAgIHJldHVybiByZXR1cm5Qcm9taXNlO1xufTtcblxuZXhwb3J0IHsgRGVmZXJyZWQgYXMgRCwgU2Vyd2lzdEVycm9yIGFzIFMsIGNsaWVudHNDbGFpbSBhcyBhLCBjbGVhbnVwT3V0ZGF0ZWRDYWNoZXMgYXMgYiwgY2FjaGVOYW1lcyBhcyBjLCBjYWNoZU1hdGNoSWdub3JlUGFyYW1zIGFzIGQsIGV4ZWN1dGVRdW90YUVycm9yQ2FsbGJhY2tzIGFzIGUsIGZpbmFsQXNzZXJ0RXhwb3J0cyBhcyBmLCBnZXRGcmllbmRseVVSTCBhcyBnLCBjYW5Db25zdHJ1Y3RSZXNwb25zZUZyb21Cb2R5U3RyZWFtIGFzIGgsIGxvZ2dlciBhcyBsLCBxdW90YUVycm9yQ2FsbGJhY2tzIGFzIHEsIHRpbWVvdXQgYXMgdCwgd2FpdFVudGlsIGFzIHcgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/serwist/dist/chunks/waitUntil.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/serwist/dist/index.internal.js":
/*!*****************************************************!*\
  !*** ./node_modules/serwist/dist/index.internal.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Deferred: () => (/* reexport safe */ _chunks_waitUntil_js__WEBPACK_IMPORTED_MODULE_0__.D),\n/* harmony export */   SerwistError: () => (/* reexport safe */ _chunks_waitUntil_js__WEBPACK_IMPORTED_MODULE_0__.S),\n/* harmony export */   assert: () => (/* reexport safe */ _chunks_waitUntil_js__WEBPACK_IMPORTED_MODULE_0__.f),\n/* harmony export */   cacheMatchIgnoreParams: () => (/* reexport safe */ _chunks_waitUntil_js__WEBPACK_IMPORTED_MODULE_0__.d),\n/* harmony export */   canConstructReadableStream: () => (/* binding */ canConstructReadableStream),\n/* harmony export */   canConstructResponseFromBodyStream: () => (/* reexport safe */ _chunks_waitUntil_js__WEBPACK_IMPORTED_MODULE_0__.h),\n/* harmony export */   cleanupOutdatedCaches: () => (/* reexport safe */ _chunks_waitUntil_js__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   clientsClaim: () => (/* reexport safe */ _chunks_waitUntil_js__WEBPACK_IMPORTED_MODULE_0__.a),\n/* harmony export */   dontWaitFor: () => (/* binding */ dontWaitFor),\n/* harmony export */   executeQuotaErrorCallbacks: () => (/* reexport safe */ _chunks_waitUntil_js__WEBPACK_IMPORTED_MODULE_0__.e),\n/* harmony export */   getFriendlyURL: () => (/* reexport safe */ _chunks_waitUntil_js__WEBPACK_IMPORTED_MODULE_0__.g),\n/* harmony export */   logger: () => (/* reexport safe */ _chunks_waitUntil_js__WEBPACK_IMPORTED_MODULE_0__.l),\n/* harmony export */   privateCacheNames: () => (/* reexport safe */ _chunks_waitUntil_js__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   resultingClientExists: () => (/* reexport safe */ _chunks_resultingClientExists_js__WEBPACK_IMPORTED_MODULE_1__.r),\n/* harmony export */   timeout: () => (/* reexport safe */ _chunks_waitUntil_js__WEBPACK_IMPORTED_MODULE_0__.t),\n/* harmony export */   waitUntil: () => (/* reexport safe */ _chunks_waitUntil_js__WEBPACK_IMPORTED_MODULE_0__.w)\n/* harmony export */ });\n/* harmony import */ var _chunks_waitUntil_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunks/waitUntil.js */ \"(app-pages-browser)/./node_modules/serwist/dist/chunks/waitUntil.js\");\n/* harmony import */ var _chunks_resultingClientExists_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunks/resultingClientExists.js */ \"(app-pages-browser)/./node_modules/serwist/dist/chunks/resultingClientExists.js\");\n\n\n\nlet supportStatus;\nfunction canConstructReadableStream() {\n    if (supportStatus === undefined) {\n        try {\n            new ReadableStream({\n                start () {}\n            });\n            supportStatus = true;\n        } catch  {\n            supportStatus = false;\n        }\n    }\n    return supportStatus;\n}\n\nfunction dontWaitFor(promise) {\n    void promise.then(()=>{});\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zZXJ3aXN0L2Rpc3QvaW5kZXguaW50ZXJuYWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQW9VO0FBQ3JQOztBQUUvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDRCQUE0QjtBQUM1Qjs7QUFFbUQiLCJzb3VyY2VzIjpbIi9Vc2Vycy9waXl1c2guZGFnYUBwb3N0bWFuLmNvbS9Eb2N1bWVudHMvUHJvamVjdHMvcGl5dXNoLWRhZ2EvZXZhLTIvc2Vzc2lvbjEtYnVpbGQtdG9kby1jYWxlbmRhci9ub2RlX21vZHVsZXMvc2Vyd2lzdC9kaXN0L2luZGV4LmludGVybmFsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IEQgYXMgRGVmZXJyZWQsIFMgYXMgU2Vyd2lzdEVycm9yLCBmIGFzIGFzc2VydCwgZCBhcyBjYWNoZU1hdGNoSWdub3JlUGFyYW1zLCBoIGFzIGNhbkNvbnN0cnVjdFJlc3BvbnNlRnJvbUJvZHlTdHJlYW0sIGIgYXMgY2xlYW51cE91dGRhdGVkQ2FjaGVzLCBhIGFzIGNsaWVudHNDbGFpbSwgZSBhcyBleGVjdXRlUXVvdGFFcnJvckNhbGxiYWNrcywgZyBhcyBnZXRGcmllbmRseVVSTCwgbCBhcyBsb2dnZXIsIGMgYXMgcHJpdmF0ZUNhY2hlTmFtZXMsIHQgYXMgdGltZW91dCwgdyBhcyB3YWl0VW50aWwgfSBmcm9tICcuL2NodW5rcy93YWl0VW50aWwuanMnO1xuZXhwb3J0IHsgciBhcyByZXN1bHRpbmdDbGllbnRFeGlzdHMgfSBmcm9tICcuL2NodW5rcy9yZXN1bHRpbmdDbGllbnRFeGlzdHMuanMnO1xuXG5sZXQgc3VwcG9ydFN0YXR1cztcbmZ1bmN0aW9uIGNhbkNvbnN0cnVjdFJlYWRhYmxlU3RyZWFtKCkge1xuICAgIGlmIChzdXBwb3J0U3RhdHVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG5ldyBSZWFkYWJsZVN0cmVhbSh7XG4gICAgICAgICAgICAgICAgc3RhcnQgKCkge31cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc3VwcG9ydFN0YXR1cyA9IHRydWU7XG4gICAgICAgIH0gY2F0Y2ggIHtcbiAgICAgICAgICAgIHN1cHBvcnRTdGF0dXMgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3VwcG9ydFN0YXR1cztcbn1cblxuZnVuY3Rpb24gZG9udFdhaXRGb3IocHJvbWlzZSkge1xuICAgIHZvaWQgcHJvbWlzZS50aGVuKCgpPT57fSk7XG59XG5cbmV4cG9ydCB7IGNhbkNvbnN0cnVjdFJlYWRhYmxlU3RyZWFtLCBkb250V2FpdEZvciB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/serwist/dist/index.internal.js\n"));

/***/ })

}]);