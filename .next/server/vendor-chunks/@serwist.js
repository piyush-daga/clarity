"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@serwist";
exports.ids = ["vendor-chunks/@serwist"];
exports.modules = {

/***/ "(ssr)/./node_modules/@serwist/window/dist/index.internal.js":
/*!*************************************************************!*\
  !*** ./node_modules/@serwist/window/dist/index.internal.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isCurrentPageOutOfScope: () => (/* binding */ isCurrentPageOutOfScope)\n/* harmony export */ });\nconst isCurrentPageOutOfScope = (scope)=>{\n    const scopeURL = new URL(scope, document.baseURI);\n    const scopeURLBasePath = new URL(\"./\", scopeURL.href).pathname;\n    return !location.pathname.startsWith(scopeURLBasePath);\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlcndpc3Qvd2luZG93L2Rpc3QvaW5kZXguaW50ZXJuYWwuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRW1DIiwic291cmNlcyI6WyIvVXNlcnMvcGl5dXNoLmRhZ2FAcG9zdG1hbi5jb20vRG9jdW1lbnRzL1Byb2plY3RzL3BpeXVzaC1kYWdhL2V2YS0yL3Nlc3Npb24xLWJ1aWxkLXRvZG8tY2FsZW5kYXIvbm9kZV9tb2R1bGVzL0BzZXJ3aXN0L3dpbmRvdy9kaXN0L2luZGV4LmludGVybmFsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGlzQ3VycmVudFBhZ2VPdXRPZlNjb3BlID0gKHNjb3BlKT0+e1xuICAgIGNvbnN0IHNjb3BlVVJMID0gbmV3IFVSTChzY29wZSwgZG9jdW1lbnQuYmFzZVVSSSk7XG4gICAgY29uc3Qgc2NvcGVVUkxCYXNlUGF0aCA9IG5ldyBVUkwoXCIuL1wiLCBzY29wZVVSTC5ocmVmKS5wYXRobmFtZTtcbiAgICByZXR1cm4gIWxvY2F0aW9uLnBhdGhuYW1lLnN0YXJ0c1dpdGgoc2NvcGVVUkxCYXNlUGF0aCk7XG59O1xuXG5leHBvcnQgeyBpc0N1cnJlbnRQYWdlT3V0T2ZTY29wZSB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@serwist/window/dist/index.internal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@serwist/window/dist/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@serwist/window/dist/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Serwist: () => (/* binding */ Serwist),\n/* harmony export */   SerwistEvent: () => (/* binding */ SerwistEvent),\n/* harmony export */   messageSW: () => (/* binding */ messageSW)\n/* harmony export */ });\n/* harmony import */ var serwist_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! serwist/internal */ \"(ssr)/./node_modules/serwist/dist/index.internal.js\");\n/* harmony import */ var _index_internal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.internal.js */ \"(ssr)/./node_modules/@serwist/window/dist/index.internal.js\");\n\n\n\nconst messageSW = (sw, data)=>{\n    return new Promise((resolve)=>{\n        const messageChannel = new MessageChannel();\n        messageChannel.port1.onmessage = (event)=>{\n            resolve(event.data);\n        };\n        sw.postMessage(data, [\n            messageChannel.port2\n        ]);\n    });\n};\n\nclass SerwistEvent {\n    type;\n    target;\n    sw;\n    originalEvent;\n    isExternal;\n    constructor(type, props){\n        this.type = type;\n        Object.assign(this, props);\n    }\n}\n\nclass SerwistEventTarget {\n    _eventListenerRegistry = new Map();\n    addEventListener(type, listener) {\n        const foo = this._getEventListenersByType(type);\n        foo.add(listener);\n    }\n    removeEventListener(type, listener) {\n        this._getEventListenersByType(type).delete(listener);\n    }\n    dispatchEvent(event) {\n        event.target = this;\n        const listeners = this._getEventListenersByType(event.type);\n        for (const listener of listeners){\n            listener(event);\n        }\n    }\n    _getEventListenersByType(type) {\n        if (!this._eventListenerRegistry.has(type)) {\n            this._eventListenerRegistry.set(type, new Set());\n        }\n        return this._eventListenerRegistry.get(type);\n    }\n}\n\nfunction urlsMatch(url1, url2) {\n    const { href } = location;\n    return new URL(url1, href).href === new URL(url2, href).href;\n}\n\nconst WAITING_TIMEOUT_DURATION = 200;\nconst REGISTRATION_TIMEOUT_DURATION = 60000;\nconst SKIP_WAITING_MESSAGE = {\n    type: \"SKIP_WAITING\"\n};\nclass Serwist extends SerwistEventTarget {\n    _scriptURL;\n    _registerOptions = {};\n    _updateFoundCount = 0;\n    _swDeferred = new serwist_internal__WEBPACK_IMPORTED_MODULE_0__.Deferred();\n    _activeDeferred = new serwist_internal__WEBPACK_IMPORTED_MODULE_0__.Deferred();\n    _controllingDeferred = new serwist_internal__WEBPACK_IMPORTED_MODULE_0__.Deferred();\n    _registrationTime = 0;\n    _isUpdate;\n    _compatibleControllingSW;\n    _registration;\n    _sw;\n    _ownSWs = new Set();\n    _externalSW;\n    _waitingTimeout;\n    constructor(scriptURL, registerOptions = {}){\n        super();\n        this._scriptURL = scriptURL;\n        this._registerOptions = registerOptions;\n        navigator.serviceWorker.addEventListener(\"message\", this._onMessage);\n    }\n    async register({ immediate = false } = {}) {\n        if (true) {\n            if (this._registrationTime) {\n                serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Cannot re-register a Serwist instance after it has been registered. Create a new instance instead.\");\n                return;\n            }\n        }\n        if (!immediate && document.readyState !== \"complete\") {\n            await new Promise((res)=>window.addEventListener(\"load\", res));\n        }\n        this._isUpdate = Boolean(navigator.serviceWorker.controller);\n        this._compatibleControllingSW = this._getControllingSWIfCompatible();\n        this._registration = await this._registerScript();\n        if (this._compatibleControllingSW) {\n            this._sw = this._compatibleControllingSW;\n            this._activeDeferred.resolve(this._compatibleControllingSW);\n            this._controllingDeferred.resolve(this._compatibleControllingSW);\n            this._compatibleControllingSW.addEventListener(\"statechange\", this._onStateChange, {\n                once: true\n            });\n        }\n        const waitingSW = this._registration.waiting;\n        if (waitingSW && urlsMatch(waitingSW.scriptURL, this._scriptURL.toString())) {\n            this._sw = waitingSW;\n            void Promise.resolve().then(()=>{\n                this.dispatchEvent(new SerwistEvent(\"waiting\", {\n                    sw: waitingSW,\n                    wasWaitingBeforeRegister: true\n                }));\n                if (true) {\n                    serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.warn(\"A service worker was already waiting to activate before this script was registered...\");\n                }\n            });\n        }\n        if (this._sw) {\n            this._swDeferred.resolve(this._sw);\n            this._ownSWs.add(this._sw);\n        }\n        if (true) {\n            serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(\"Successfully registered service worker.\", this._scriptURL.toString());\n            if (navigator.serviceWorker.controller) {\n                if (this._compatibleControllingSW) {\n                    serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.debug(\"A service worker with the same script URL is already controlling this page.\");\n                } else {\n                    serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.debug(\"A service worker with a different script URL is currently controlling the page. The browser is now fetching the new script now...\");\n                }\n            }\n            if ((0,_index_internal_js__WEBPACK_IMPORTED_MODULE_1__.isCurrentPageOutOfScope)(this._registerOptions.scope || this._scriptURL.toString())) {\n                serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.warn(\"The current page is not in scope for the registered service worker. Was this a mistake?\");\n            }\n        }\n        this._registration.addEventListener(\"updatefound\", this._onUpdateFound);\n        navigator.serviceWorker.addEventListener(\"controllerchange\", this._onControllerChange);\n        return this._registration;\n    }\n    async update() {\n        if (!this._registration) {\n            if (true) {\n                serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Cannot update a Serwist instance without being registered. Register the Serwist instance first.\");\n            }\n            return;\n        }\n        await this._registration.update();\n    }\n    get active() {\n        return this._activeDeferred.promise;\n    }\n    get controlling() {\n        return this._controllingDeferred.promise;\n    }\n    getSW() {\n        return this._sw !== undefined ? Promise.resolve(this._sw) : this._swDeferred.promise;\n    }\n    async messageSW(data) {\n        const sw = await this.getSW();\n        return messageSW(sw, data);\n    }\n    messageSkipWaiting() {\n        if (this._registration?.waiting) {\n            void messageSW(this._registration.waiting, SKIP_WAITING_MESSAGE);\n        }\n    }\n    _getControllingSWIfCompatible() {\n        const controller = navigator.serviceWorker.controller;\n        if (controller && urlsMatch(controller.scriptURL, this._scriptURL.toString())) {\n            return controller;\n        }\n        return undefined;\n    }\n    async _registerScript() {\n        try {\n            const reg = await navigator.serviceWorker.register(this._scriptURL, this._registerOptions);\n            this._registrationTime = performance.now();\n            return reg;\n        } catch (error) {\n            if (true) {\n                serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.error(error);\n            }\n            throw error;\n        }\n    }\n    _onUpdateFound = (originalEvent)=>{\n        const registration = this._registration;\n        const installingSW = registration.installing;\n        const updateLikelyTriggeredExternally = this._updateFoundCount > 0 || !urlsMatch(installingSW.scriptURL, this._scriptURL.toString()) || performance.now() > this._registrationTime + REGISTRATION_TIMEOUT_DURATION;\n        if (updateLikelyTriggeredExternally) {\n            this._externalSW = installingSW;\n            registration.removeEventListener(\"updatefound\", this._onUpdateFound);\n        } else {\n            this._sw = installingSW;\n            this._ownSWs.add(installingSW);\n            this._swDeferred.resolve(installingSW);\n            if (true) {\n                if (this._isUpdate) {\n                    serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(\"Updated service worker found. Installing now...\");\n                } else {\n                    serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(\"Service worker is installing...\");\n                }\n            }\n        }\n        this.dispatchEvent(new SerwistEvent(\"installing\", {\n            sw: installingSW,\n            originalEvent,\n            isExternal: updateLikelyTriggeredExternally,\n            isUpdate: this._isUpdate\n        }));\n        ++this._updateFoundCount;\n        installingSW.addEventListener(\"statechange\", this._onStateChange);\n    };\n    _onStateChange = (originalEvent)=>{\n        const registration = this._registration;\n        const sw = originalEvent.target;\n        const { state } = sw;\n        const isExternal = sw === this._externalSW;\n        const eventProps = {\n            sw,\n            isExternal,\n            originalEvent\n        };\n        if (!isExternal && this._isUpdate) {\n            eventProps.isUpdate = true;\n        }\n        this.dispatchEvent(new SerwistEvent(state, eventProps));\n        if (state === \"installed\") {\n            this._waitingTimeout = self.setTimeout(()=>{\n                if (state === \"installed\" && registration.waiting === sw) {\n                    this.dispatchEvent(new SerwistEvent(\"waiting\", eventProps));\n                    if (true) {\n                        if (isExternal) {\n                            serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.warn(\"An external service worker has installed but is \" + \"waiting for this client to close before activating...\");\n                        } else {\n                            serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.warn(\"The service worker has installed but is waiting \" + \"for existing clients to close before activating...\");\n                        }\n                    }\n                }\n            }, WAITING_TIMEOUT_DURATION);\n        } else if (state === \"activating\") {\n            clearTimeout(this._waitingTimeout);\n            if (!isExternal) {\n                this._activeDeferred.resolve(sw);\n            }\n        }\n        if (true) {\n            switch(state){\n                case \"installed\":\n                    if (isExternal) {\n                        serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.warn(\"An external service worker has installed. \" + \"You may want to suggest users reload this page.\");\n                    } else {\n                        serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(\"Registered service worker installed.\");\n                    }\n                    break;\n                case \"activated\":\n                    if (isExternal) {\n                        serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.warn(\"An external service worker has activated.\");\n                    } else {\n                        serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(\"Registered service worker activated.\");\n                        if (sw !== navigator.serviceWorker.controller) {\n                            serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.warn(\"The registered service worker is active but \" + \"not yet controlling the page. Reload or run \" + \"`clients.claim()` in the service worker.\");\n                        }\n                    }\n                    break;\n                case \"redundant\":\n                    if (sw === this._compatibleControllingSW) {\n                        serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(\"Previously controlling service worker now redundant!\");\n                    } else if (!isExternal) {\n                        serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(\"Registered service worker now redundant!\");\n                    }\n                    break;\n            }\n        }\n    };\n    _onControllerChange = (originalEvent)=>{\n        const sw = this._sw;\n        const isExternal = sw !== navigator.serviceWorker.controller;\n        this.dispatchEvent(new SerwistEvent(\"controlling\", {\n            isExternal,\n            originalEvent,\n            sw,\n            isUpdate: this._isUpdate\n        }));\n        if (!isExternal) {\n            if (true) {\n                serwist_internal__WEBPACK_IMPORTED_MODULE_0__.logger.log(\"Registered service worker now controlling this page.\");\n            }\n            this._controllingDeferred.resolve(sw);\n        }\n    };\n    _onMessage = async (originalEvent)=>{\n        const { data, ports, source } = originalEvent;\n        await this.getSW();\n        if (this._ownSWs.has(source)) {\n            this.dispatchEvent(new SerwistEvent(\"message\", {\n                data,\n                originalEvent,\n                ports,\n                sw: source\n            }));\n        }\n    };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@serwist/window/dist/index.js\n");

/***/ })

};
;